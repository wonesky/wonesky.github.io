<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown语法简记</title>
    <url>/2016/04/14/Markdown%E8%AF%AD%E6%B3%95%E7%AE%80%E8%AE%B0/</url>
    <content><![CDATA[<p>Markdown 是一种轻量级 <strong>标记语言</strong>，它允许我们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这是维基百科的解释<a href="https://zh.wikipedia.org/zh-cn/Markdown" target="_blank" rel="noopener">Markdown</a>。它不像字处理软件Word有大量的排版设置，在Markdown中通过简单的语法来设置输出样式。</p>
<a id="more"></a>

<h3 id="Markdown-优点"><a href="#Markdown-优点" class="headerlink" title="Markdown 优点"></a>Markdown 优点</h3><p>Markdown是纯文本格式，在任何平台都可以使用常用的编辑器去写。一些只用过windows的童鞋认识不到纯文本的好处，觉得Word不是很好吗，他们不知道很多Mac和Linux平台的用户是没装Word的，况且纯文本文件基本可以使用任何一个编辑器就可以打开，不用再打开类似Word的庞大的软件。Markdown另一个有点就是你只需写，用键盘把文字内容啪啪啪地打出来后就已经排版好了，最好从头到尾都不要使用鼠标。适合那些经常写代码、博客文章等的人，github上的说明文档都是使用Markdown来写，许多博客平台也支持Markdown格式写作。</p>
<p>下面简单记录下Markdown的语法，以备查询。<br>首先记住两点：</p>
<ul>
<li><strong>标记符号与后面文字中间要有空格</strong></li>
<li><strong>如果想输出标记符使用反斜杠来转义符 “&quot;</strong></li>
</ul>
<h3 id="段落："><a href="#段落：" class="headerlink" title="段落："></a><strong>段落</strong>：</h3><p>段落间以一个或以上的空行来分</p>
<h3 id="换行："><a href="#换行：" class="headerlink" title="换行："></a><strong>换行</strong>：</h3><p>两个以上空格再加回车</p>
<h3 id="标题："><a href="#标题：" class="headerlink" title="标题："></a><strong>标题</strong>：</h3><p>用#来标识标题，在行首插入1到6个#，对应到标题1到6阶。比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题  </span><br><span class="line">## 二级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<p>显示效果就是</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><ul>
<li>无序列表：使用*、+或是-作为列表标记。列表分级前面加tab或4个空格。比如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 红色</span><br><span class="line">- 蓝色</span><br><span class="line">* 绿色</span><br><span class="line">	- 深绿</span><br><span class="line">	- 浅绿</span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<blockquote>
<ul>
<li>红色</li>
</ul>
<ul>
<li>蓝色</li>
</ul>
<ul>
<li>绿色<ul>
<li>深绿</li>
<li>浅绿</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>有序列表： 使用数字接着一个英文句点 你在列表标记上使用的数字并不会影响显示输出的结果。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 首先</span><br><span class="line">2. 其次，第一段：巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉</span><br><span class="line"></span><br><span class="line">   第二段：巴拉巴拉巴拉巴拉</span><br><span class="line">5. 最后</span><br><span class="line">    3.第一</span><br><span class="line">    1.第二</span><br></pre></td></tr></table></figure>
<p>输出显示</p>
<blockquote>
<ol>
<li>首先</li>
<li>其次，第一段：巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉</li>
</ol>
</blockquote>
<pre><code>第二段：巴拉巴拉巴拉巴拉</code></pre><blockquote>
<ol start="5">
<li>最后<ol start="3">
<li>第一</li>
<li>第二</li>
</ol>
</li>
</ol>
</blockquote>
<p>当然最好还是按照字母顺序，这样感觉比较顺。如果你想输出数字加点可以使用转义符反斜杠<code>1\.</code> 则输出 1.。若果列表中有多个段落则要空行后 段落开头加一个Tab或4个空格。</p>
<h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h3><p>使用 &gt; 表示文字引用。区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; 就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 野火烧不尽</span><br><span class="line">&gt;&gt; 春风吹又生</span><br></pre></td></tr></table></figure>
<p>显示为</p>
<blockquote>
<p>野火烧不尽</p>
<blockquote>
<p>春风吹又生</p>
</blockquote>
</blockquote>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进。如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符</p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a><strong>代码区块</strong></h3><ul>
<li>代码快：对程序猿来说，如果想贴代码，则不希望它以一般段落文件的方式去排版，而是照原来代码的样子显示。在Markdown中只要简单地缩进 4 个空格或是 1 个制表符就可以。一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tell application &quot;Foo&quot;</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><ul>
<li><p>行内代码快：如果要标记一小段行内代码，你可以用反引号把它包起来（`）。比如：使用`printf()`,显示为<code>printf()</code>。</p>
</li>
<li><p>加强代码快：对于特定编程语言，希望其语法高亮的显示，行号显示时可以在首尾分别使用三个反引号（`）把代码包起来。</p>
</li>
</ul>
<pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line"><span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></code></pre><p>显示效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line"><span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>

<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a><strong>链接和图片</strong></h3><p>使用 [描述](链接地址) 为文字增加外链接。使用 ![描述](图片链接地址) 插入图像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[我的博客](http://www.wonesky.com)</span><br><span class="line">![Markdown图片测试](http://wonesky.qiniudn.com/Markdown-img-test.png)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.wonesky.com" target="_blank" rel="noopener">我的博客</a></p>
<p><img src="http://wonesky.qiniudn.com/Markdown-img-test.png-myimg" alt="Markdown图片测试"></p>
<h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a><strong>斜体和粗体</strong></h3><p>使用 *或_ 标识斜体。使用两个*或_ 标识粗体。</p>
<pre><code>斜体   *斜体*    
粗体  __粗体__</code></pre><p>效果如下</p>
<blockquote>
<p><em>斜体</em></p>
</blockquote>
<blockquote>
<p><strong>粗体</strong></p>
</blockquote>
<p>如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><strong>删除线</strong></h3><p>使用 ~~ 表示删除线。</p>
<pre><code>~~这是一段错误的文本。~~</code></pre><p>效果：</p>
<blockquote>
<p><del>这是一段错误的文本。</del></p>
</blockquote>
<h3 id="表格支持"><a href="#表格支持" class="headerlink" title="表格支持"></a><strong>表格支持</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | $1600 |   5     |</span><br><span class="line">| 手机        |   $12   |   12   |</span><br><span class="line">| 管线        |    $1    |  234  |</span><br></pre></td></tr></table></figure>
<p>显示效果如下:</p>
<table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>还有一些比较高级的用法，比如流程图和序列图的绘制，LaTeX 公式的支持（访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> ，使用方法参考，<a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="noopener">公式指导手册</a>。还有待办事宜 Todo 列表，使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表。</p>
<h3 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h3><p>支持Markdown的编辑器太多，功能也不完全一致，有的是用来进行基本的写作，有的是用来写代码的，有的甚至只是博客平台配套的编辑器。月光博客有篇文章对Markdown编辑器总结的不错，请参考<a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">好用的Markdown编辑器一览</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></li>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">月光博客——好用的Markdown编辑器一览</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用总结</title>
    <url>/2016/03/22/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>本文是对自己学习使用Git来做版本控制的过程的一个小结，也是为了方便以后的速查参考。</p>
<a id="more"></a>
<h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><p>什么是“版本控制”呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。试想当你的文稿、论文、设计图、程序源码等，需要多次修改，有时候发现改过的新版本还不如原来的，想退回原版本，这时候如果你没有保留原来的备份就有点悲剧了。或者多人合作共同完成一个项目时，为了保证文件的一致性，需要对每人对文件的修改做些记录。这是你就需要一个版本控制的东西。回顾以前区分文件之间不同，主要靠对文件的重命名和日期，对之间的不同也是同时打开文件进行比对，这种方法是比较简单，当文件按复杂时，特别像程序源码，文件比较多，修改也比较频繁，再用这种方法就比较容易出错。</p>
<h2 id="版本控制的种类"><a href="#版本控制的种类" class="headerlink" title="版本控制的种类"></a>版本控制的种类</h2><p>版本控制工具主要分两种，集中式和分布式版本控制，是两种不同的管理思想，就类似民主和集权，各有各优劣。集中式版本控制工具有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。这种做法管理起来相对容易，集中管理的一个通病是单点故障，如果集中服务器出故障，协同工作将停滞，版本历史可能损毁，只能从各个客户端拼凑。对于分布式版本控制工具，在这类系统中，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p>
<h2 id="分布式版本控制工具–Git"><a href="#分布式版本控制工具–Git" class="headerlink" title="分布式版本控制工具–Git"></a>分布式版本控制工具–Git</h2><p>Git是一款免费、开源的分布式版本控制系统，是LinusTorvalds为更好地管理Linux内核开发而设计。git一词源自英国俚语，意思大约是“混账”，LinusTorvalds自嘲道:</p>
<blockquote>
<p>I’m an egotistical bastard, and I name all my projects after myself. First Linux, now git.</p>
</blockquote>
<p>更多参考<a href="https://zh.wikipedia.org/zh/Git" target="_blank" rel="noopener">Git维基</a>。什么，还被qiang打不开？参考<a href="http://www.wonesky.com/2015/06/14/%E9%82%A3%E4%BA%9B%E7%88%AC%E8%BF%87%E7%9A%84%E6%A2%AF%E5%AD%90/" target="_blank" rel="noopener">fq秘笈</a>。多用Google和Wiki吧。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>从<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>下载适合你系统的git版本，linux一般系统自带。git分命令行和GUI版本，因为传承自linux，命令行是必学的，更方便和强大。windows下，按默认设置安装即可，安装后开始菜单或右键中找到git bash打开即可。详见<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">安装说明</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装好后，使用git的第一步是对其进行配置你的用户名和邮箱，当提交时会用到这些信息。命令 git config 是配置命令，–global参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然git有三种级别的配置，系统级、用户级和仓库级，可以更改位于不同位置的配置文件对它们进行配置。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;aaa&quot;    </span><br><span class="line">$ git config --global user.email aaa@bb.com</span><br><span class="line">$ git config --global core.quotepath false  //中文文件名输出显示乱码问题</span><br></pre></td></tr></table></figure>
<p>如果想查看本机的配置，可以使用下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>
<h3 id="使用git"><a href="#使用git" class="headerlink" title="使用git"></a>使用git</h3><p>使用git时遇到不熟悉的命令时，记住使用git help command来获取帮助，常查帮助手册是很好的一个习惯。</p>
<h4 id="初始化版本库"><a href="#初始化版本库" class="headerlink" title="初始化版本库"></a>初始化版本库</h4><p>有两种方式来创建版本仓库(repository):本地创建并添加文件和从远程仓库克隆。<br>本地创建，在选好的目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git init</span><br></pre></td></tr></table></figure>
<p>这条命令会创建一个空的版本库(repository),在当前文件夹下会创建一个名为.git的隐藏文件夹，这个子目录含有你初始化的Git仓库中所有的必须文件，不要随便去修改里面的内容。这个空仓库会默认创建一个名为master的分支，并在此分支上。现在当前目录(除去.git目录)就是你的工作区和没被跟踪的文件，.git目录里是你的版本库。(见git版本库认识图中关系)</p>
<p>另一种创建版本库的方式是从已经存在了的 Git 仓库获取一个拷贝，可以使用 git clone [url] local_repository_name。当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git clone https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure>
<p>这会在当前目录下创建一个名为 “mylibgit” 的目录，并在这个目录下初始化一个 .git文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。Git支持多种数据传输协议。上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git</p>
<h4 id="git版本库的认识"><a href="#git版本库的认识" class="headerlink" title="git版本库的认识"></a>git版本库的认识</h4><p>Git保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。<br>版本库中有个重要的概念需要明白，就是暂存区（stage或者称为index）。你的本地仓库由 git 维护的三棵“树”组成。第一个是你的“工作目录”，它持有实际文件；第二个是“暂存区（Index）”，它像个缓存区域，临时保存你的改动；最后是“HEAD”，它指向你最后一次提交的结果。你所修改的文件必须先保存到暂存区，才能提交到当前分支上,，是不可以直接提交的。你也可以把暂存区的内容恢复到工作区来撤销工作区的修改，下面是工作区、版本库和暂存区的关系图，图中的命令后面会解释：<br><img src="http://wonesky.qiniudn.com/git-stage.png-myimg" style="display:block;margin:auto"/></p>
<p>还有一个重要的是文件的状态。文件状态可以使用git status命令查看，工作目录下的文件共有四种状态：未追踪(untract)、已提交（committed）/未修改(unmodified)，已修改（modified）和已暂存（staged）。它们之间的状态转换如下图所示：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/Gitfilelifecycle.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/Gitfilelifecycle.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><p>现在我们在此目录下创建文件hello.txt，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p>命令查看文件状态，现在我们没有跟踪任何文件，所有的修改都不会被记录。首先我们使用git add 命令来跟踪文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add hello.txt</span><br></pre></td></tr></table></figure>
<p>现在hello.txt文件已被跟踪，如果不想跟踪某文件可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached filename</span><br></pre></td></tr></table></figure>
<p>打开hello.txt往里面写几行内容，现在用git status查看文件状态会发现文件状态为修改状态。再使用git add命令把修改保存到暂存区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add hello.txt</span><br></pre></td></tr></table></figure>
<p>现在你又在hello.txt中添加一行文字，文件状态又变为修在状态，如果你想放弃对工作区的修改，可以使用git checkout命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout --hello.txt</span><br></pre></td></tr></table></figure>
<p>此命令是用暂存区的内容来替换工作区的内容，达到撤销修改的目的。修改好后就可以提交到当前分支了，使用git commit命令,-m后面输入的是本次提交的说明，最好是有意义的,方便以后查阅。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot; add new file hello.txt&quot;</span><br></pre></td></tr></table></figure>
<p>好，到现在为止，我们完成了一次提交。下面我们来看下删除文件和移动文件(重命名文件)，git是如何跟踪的。我们再新建个test.txt文件，用git add来跟踪它，增添一行文字，暂存，提交。当我们不需要test.txt时，如果直接执行本地删除，再用git status查看文件状态，发现暂存区并未跟着删除，这样提交的话版本库当前分支也不会跟着删除。要保证暂存区删除，提交后HEAD跟着删除，有两种方法，一种是使用命令git rm，熟悉Linux的都知道rm是Linux下删除文件的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br></pre></td></tr></table></figure>
<p>这样暂存区和工作区都会把test.txt文件删除。还有一种就是你本地删除后，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add -u</span><br></pre></td></tr></table></figure>
<p>或者是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br></pre></td></tr></table></figure>
<p>-u是可以将（被版本库追踪的）本地文件的变更（修改、删除）全部记录到暂存区中。-A会对工作区中所有改动以及新增文件添加到暂存区。<br>如果你想查看暂存区的文件，可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git ls-files</span><br></pre></td></tr></table></figure>
<p>查看历史版本中的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git ls-files --with-tree=HEAD^</span><br></pre></td></tr></table></figure>
<p>如果想恢复删除，只是在最新的提交中删除了文件，历史提交中文件仍然保留，可以从历史提交中提取文件。执行下面的命令可以从历史（前一次提交）中恢复test.txt文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git cat-file -p HEAD~1:test.txt &gt; test.txt</span><br></pre></td></tr></table></figure>
<p>对文件进行重命名也有类似的两种操作，一种是git mv命令，如果把test.txt改名为README，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git mv test.txt README</span><br></pre></td></tr></table></figure>
<p>也可以本地直接重命名，然后使用git add -A命令。</p>
<p>我们可以常用git status查看文件状态，当我们想要查看工作区，暂存区和HEAD所指分支之间的不同时，我们可以使用git diff命令。</p>
<h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>通过使用不同参数调用git diff命令，可以对工作区、暂存区、HEAD中的内容两两比较。下图是git diff命令不同区域的比较：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-diff.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-diff.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<ul>
<li>工作区和暂存区比较。<br>默认情况下比较的是工作区和暂存区之间的不同<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git diff</span><br></pre></td></tr></table></figure></li>
<li>暂存区和HEAD比较。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure></li>
<li>工作区和HEAD比较。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure>
如果想比较特定的文件，在后面加上文件名</li>
</ul>
<h4 id="git-log-和-git-reflog"><a href="#git-log-和-git-reflog" class="headerlink" title="git log 和 git reflog"></a>git log 和 git reflog</h4><p>当我们有多次提交后，想查看提交的历史，可以使用git log命令，log命令记录了所有提交的历史。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit eb970fdb27a851b05e4ffd89a6b012ec4be925dc</span><br><span class="line">Author: wonesky &lt;wonesky@gmail.com&gt;</span><br><span class="line">Date: wed Apr 13 21:32:35 2016 +0800</span><br><span class="line">    add a new file hello.md</span><br></pre></td></tr></table></figure>
<p>git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p>
<p>git relog 是查看所有的操作记录。常使用reflog挽救错误的重置。</p>
<h4 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h4><p>我们再git log中看到commit对象的SHA-1校验和，40位的一个“魔幻数字”，这究竟代表什么，下图是Git对象库中各个对象之间的关系：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-repos-detail.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-repos-detail.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<p>从中看出分支master指向的是一个提交ID（最新提交），每个commit对象中包含对象哈希ID，目录树ID，上次提交ID和作者。这样就能把每次提交串起来。</p>
<h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>当多次提交后，发现想回到以前提交的版本，git reset命令改变分支引用文件内容，即实现分支的重置。<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-reset.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-reset.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a><br>git reset [–soft | –mixed | –hard | –merge | –keep] &lt; commit &gt;</p>
<ul>
<li><p>使用参数–hard，如：git reset –hard  commit_ID</p>
<p>会执行上图中的1、2、3全部的三个动作。即：</p>
<ol>
<li>替换引用的指向。引用指向新的提交ID。</li>
<li>替换暂存区。替换后，暂存区的内容和引用指向的目录树一致。</li>
<li>替换工作区。替换后，工作区的内容变得和暂存区一致，也和HEAD所指向的目录树内容相同。<br>例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
彻底撤销最近的提交。引用回退到前一次，而且工作区和暂存区都会回退到上一次提交的状态。自上一次以来的提交全部丢失。HEAD^n表示最近提交的前n次，HEAD^可替换为提交历史任一次提交的ID，40位可以只写前几位，能够和其它区分即可。</li>
</ol>
</li>
<li><p>使用参数–soft，如:git reset –soft &lt; commit &gt;。</p>
<p>会执行上图中的操作1。即只更改引用的指向，不改变暂存区和工作区<br>。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --soft HEAD^</span><br></pre></td></tr></table></figure>
<p>工作区和暂存区不改变，但是引用向前回退一次。当对最新提交的提交说明或者提交的更改不满意时，撤销最新的提交以便重新提交。</p>
</li>
<li><p>使用参数–mixed或者不使用参数（缺省即为–mixed），如:git reset &lt; commit &gt;。</p>
<p>会执行上图中的操作1和操作2。即更改引用的指向以及重置暂存区，但是不改变工作区。<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git reset</span><br><span class="line">$  git reset HEAD</span><br></pre></td></tr></table></figure>
<p>仅用HEAD指向的目录树重置暂存区，工作区不会受到影响，相当于将之前用git add命令更新到暂存区的内容撤出暂存区。引用也未改变，因为引用重置到HEAD相当于没有重置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset -- filename</span><br></pre></td></tr></table></figure>
<p>仅将文件filename撤出暂存区，暂存区中其他文件不改变。相当于对命令git add filename的反向操作。是把暂存区重置为HEAD所指内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD^</span><br></pre></td></tr></table></figure>
<p>工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。</p>
</li>
</ul>
<p>使用重置命令是有危险的，会彻底的丢弃历史。那么还能够通过浏览提交历史的办法找到丢弃的提交ID，再使用重置命令恢复历史么？不可能！因为重置让提交历史也改变了。可以使用git reflog查看分支HEAD的改变记录，再恢复错误的重置。</p>
<h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>git reset是对版本的撤销更改，可以回退到以前的版本。如果对文件的修改想撤销该怎么办，比如我在工作区修改了某个文件，或修改的文件已存到暂存区，此时工作区，暂存区和HEAD内容都不同了，工作区是最后修改的，其次是暂存区，如果发现修改的错了想撤销工作区或暂存区的修改可以使用git checkout命令，下图是此命令的详细情况，checkout命令还有个是改变分支的作用，后面会说。<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-checkout.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-checkout.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<ul>
<li><p>命令：git checkout branch</p>
<p>检出branch分支。要完成如图的三个步骤，更新HEAD以指向branch分支，以branch指向的树更新暂存区和工作区。</p>
</li>
<li><p>命令：git checkout</p>
<p>汇总显示工作区、暂存区与HEAD的差异。</p>
</li>
<li><p>命令：git checkout HEAD</p>
<p>同上。</p>
</li>
<li><p>命令：git checkout – filename</p>
<p>用暂存区中filename文件来覆盖工作区中的filename文件。相当于取消自上次执行git add filename以来（如果执行过）本地的修改。</p>
<p>这个命令很危险，因为对于本地的修改会悄无声息的覆盖，毫不留情。</p>
</li>
<li><p>命令：git checkout branch – filename</p>
<p>维持HEAD的指向不变。将branch所指向的提交中的filename替换暂存区和工作区中相应的文件。注意会将暂存区和工作区中的filename文件直接覆盖。</p>
</li>
<li><p>命令：git checkout – . 或写做 git checkout .</p>
<p>注意：git checkout命令后的参数为一个点（“.”）。这条命令最危险！会取消所有本地的修改（相对于暂存区）。相当于将暂存区的所有文件直接覆盖本地文件，不给用户任何确认的机会！</p>
</li>
</ul>
<h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>命令git stash可以用于保存和恢复工作进度</p>
<ul>
<li><p>命令：git stash</p>
<p>保存当前工作进度。会分别对暂存区和工作区的状态进行保存。</p>
</li>
<li><p>命令：git stash list</p>
<p>显示进度列表。此命令显然暗示了git stash可以多次保存工作进度，并且在恢复的时候进行选择。</p>
</li>
<li><p>命令：git stash pop [–index] [&lt; stash &gt;]</p>
<p>如果不使用任何参数，会恢复最新保存的工作进度，并将恢复的工作进度从存储的工作进度列表中清除。</p>
<p>如果提供&lt; stash &gt;参数（来自于git stash list显示的列表），则从该 &lt; stash &gt;中恢复。恢复完毕也将从进度列表中删除&lt; stash &gt;。</p>
<p>选项–index除了恢复工作区的文件外，还尝试恢复暂存区。这也就是为什么在本章一开始恢复进度的时候显示的状态和保存进度前略有不同。</p>
</li>
</ul>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>Git 可以给历史中的某一个提交打上标签，以示重要。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。然而，附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。使用命令git tag 查看已有的标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>
<p>打轻量级标签的命令格式为git tag  &lt; tagname &gt; [&lt; commit &gt;],创建标签需要输入标签的名字<tagname>和一个可选的提交ID<commit>。如果没有提供提交ID，则基于头指针HEAD创建标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag v1.0</span><br><span class="line">$ git tag v0.9 eb970fdb</span><br></pre></td></tr></table></figure>
<p>创建附注标签使用-a参数，-m选项指定了一条将会存储在标签中的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a v1.1 -m &apos;my version 1.1&apos;</span><br></pre></td></tr></table></figure>
<p>通过使用 git show &lt; tagname &gt; 命令可以看到标签信息与对应的提交信息。还有个选项-s是创建带GPG签名的标签。</p>
<p>删除标签通过选项-d 来实现,如下所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d v1.1</span><br></pre></td></tr></table></figure>
<p>创建的标签都只存储在本地，默认情况下，git push 命令并不会传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上。这个过程就像共享远程分支一样 - 你可以运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin [tagname]</span><br></pre></td></tr></table></figure>
<p>如果想要一次性推送很多标签，也可以使用带有 –tags 选项的 git push 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。如果想删除远程标签，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin :refs/tags/&lt; tagname &gt;</span><br></pre></td></tr></table></figure>

<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>我们理解了git对象中每次提交的数据存储后就容易理解分支的概念，Git 的分支，其实本质上仅仅是指向提交对象的可变指针。在Git中分支管理使用命令git branch。该命令的主要用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法1： git branch</span><br><span class="line">用法2： git branch &lt;branchname&gt;</span><br><span class="line">用法3： git branch &lt;branchname&gt; &lt;start-point&gt;</span><br><span class="line">用法4： git branch -d &lt;branchname&gt;</span><br><span class="line">用法5： git branch -D &lt;branchname&gt;</span><br><span class="line">用法6： git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;</span><br><span class="line">用法7： git branch -M &lt;oldbranch&gt; &lt;newbranch&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>用法1用于显示本地分支列表。<br>当前分支在输出中会显示为特别的颜色，并用星号 “*” 标识出来。</li>
<li>用法2和用法3用于创建分支。<br>用法2基于当前头指针（HEAD）指向的提交创建分支，新分支的分支名为&lt; branchname&gt;。<br>用法3基于提交&lt; start-point&gt;创建新分支，新分支的分支名为&lt; branchname&gt;。</li>
<li>用法4和用法5用于删除分支。<br>用法4在删除分支&lt; branchname&gt;时会检查所要删除的分支是否已经合并到其他分支中，否则拒绝删除。<br>用法5会强制删除分支&lt; branchname&gt;，即使该分支没有合并到任何一个分支中。</li>
<li>用法6和用法7用于重命名分支。<br>如果版本库中已经存在名为&lt; newbranch&gt;的分支，用法6拒绝执行重命名，而用法7会强制执行。</li>
</ul>
<p>我们使用git checkout &lt; branchname &gt;来切换分支，-b选项是新建分支并切换到该分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure>
<p>如果想要两个分支合并，使用git merge命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge [选项...] &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>合并操作的大多数情况，只须提供一个&lt; commit&gt;（提交ID或对应的引用：分支、标签等）作为参数。合并操作将&lt; commit&gt;对应的目录树和当前工作分支的目录树的内容进行合并，合并后的提交以当前分支的提交作为第一个父提交，以&lt; commit&gt;为第二个父提交。合并操作还支持将多个&lt; commit &gt;代表的分支和当前分支进行合并，过程类似。<br>一般情况下git会比较智能的把两个分支合并，但合并操作并非总会成功，因为合并的不同提交可能同时修改了同一文件相同区域的内容，导致冲突。冲突会造成合并操作的中断，冲突的文件被标识，用户可以对标识为冲突的文件进行冲突解决操作，然后更新暂存区，再提交，最终完成合并操作。如遇到比较复杂的情形，请参考<a href="http://www.worldhello.net/gotgit/03-git-harmony/020-conflict.html" target="_blank" rel="noopener">冲突解决</a></p>
<p>在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。要用它得遵守一条准则：</p>
<blockquote>
<p>不要对在你的仓库外有副本的分支执行变基。</p>
</blockquote>
<p>还有就是分支的管理策略，如何在项目实践中创建像开发分支、特性分支、修改特定bug的分支等，这篇文章给了个比较好的例子供参考<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a><br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-model.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-model.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<p>关于git工作流还有个参考资料是<a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="noopener">git 工作流指南</a></p>
<h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>以上都是我们在本地操作，Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。我们可以搭建团队的git服务器，也可以使用别人提供的。像有名的<a href="https://github.com/" target="_blank" rel="noopener">github</a>，<a href="http://git.oschina.net/" target="_blank" rel="noopener">开源中国的git服务</a>等。github免费的只提供公有仓库，开源中国提供免费创建私有仓库。只要申请个账号登录就可以享受这一切了。由于你的本地Git仓库和GitHub仓库之间是通过<a href="https://zh.wikipedia.org/zh-cn/Secure_Shell" target="_blank" rel="noopener">SSH</a>加密传输的，在使用之前需要设置一下SSH key。</p>
<p>这之前要了解公钥和私钥的概念，见<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">公开密钥加密</a>。使用SSH公钥/私钥时,公钥放在github上，私钥在自己电脑上，更安全，不用每次输入密码。查看电脑中存在的SSH keys： ls -al ~/.ssh   类似rsa rsa.pub是一对SSH key *.pub是公钥。我们可以生成新的密钥对，使用下面命令生成SSH key；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  ssh-keygen -t rsa -b 4096 -C &quot;your_enmail@e.com&quot;</span><br></pre></td></tr></table></figure>
<p>-t指加密类型：rsa、DSA、ECDSA等，-b指大小bits，-C Comment标签。<br>然后会提示你保存的路径文件名 和 是否加密码（访问key时使用的密码）。生成密钥对后，需要把公钥部署到github：在设置中，SSH key管理中把公钥内容添加。*.pub使用编辑器打开复制粘贴进去。然后在本地测试连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>可以参考<a href="https://help.github.com/categories/ssh/" target="_blank" rel="noopener">github帮助</a>。下面是远程仓库有关的命令及功能：</p>
<ul>
<li><p>查看远程仓库：git romote  -v</p>
</li>
<li><p>查看某个远程仓库详细信息：git remote show [remote-name]</p>
</li>
<li><p>添加远程仓库：git remote add [shortname] [url]</p>
</li>
<li><p>从远程仓库抓取数据到本地：git fetch [remote-name] [branch-name]<br>  如果设置了某个分支用于跟踪某个远端仓库的分支,git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支<br>  = git fetch+git merge</p>
<p>  git pull &lt; 远程主机名 &gt; &lt; 远程分支名 &gt;:&lt; 本地分支名 &gt;</p>
</li>
<li><p>推送数据到远程仓库：</p>
<p> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>
<p> 在跟踪分支里输入git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据</p>
</li>
<li><p>远程仓库删除和重命名： git remote rm   和   git remote rename</p>
</li>
<li><p>跟踪远程分支：git checkout -b [分支名] [远程名]/[分支名]<br>从远程分支 checkout 出来的本地分支，称为_跟踪   分支(tracking branch)<br>git clone 会自动创建一个名为 master 的分支来跟踪 origin/master<br>若果让本地已经存在的分支和远程分支关联，使用<code>git branch --set-upstream-to [远程名]/[分支名]</code></p>
</li>
<li><p>删除远程分支：git push [远程名] :[分支名]</p>
</li>
</ul>
<h4 id="git-常用命令图"><a href="#git-常用命令图" class="headerlink" title="git 常用命令图"></a>git 常用命令图</h4><p>以上常用命令，可以如下图所示：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-basic.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-basic.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></li>
<li><a href="http://www.worldhello.net/gotgit/index.html" target="_blank" rel="noopener">Git权威指南</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git简明指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰-常用Git命令清单</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a></li>
<li><a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="noopener">git 工作流指南</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>那些爬过的梯子</title>
    <url>/2015/06/14/%E9%82%A3%E4%BA%9B%E7%88%AC%E8%BF%87%E7%9A%84%E6%A2%AF%E5%AD%90/</url>
    <content><![CDATA[<p>5月19日在G_F_W的黑名单上又多了一个重量级网站，中文维基百科被关键字屏蔽和DNS污染而无法访问。英文版却并没有受影响，这是要提高国民英语水平的节奏。对于那些经常使用谷歌服务，或者发现经常有想去的网站打不开，再或者想听到不同的人的不同声音来开阔一下视野，或者你想看些国内找不到的历史资料，在此向你介绍几种不同的梯子。梯子的作用就是连接上一台国外的服务器，然后通过那台服务器访问你想要的内容，服务器再把内容返回给你。关于梯子的获取类似蛋和鸡的关系，一般情况下梯子都在挡在墙的外面，当你获得一个后翻过去后就会发现更多的工具。</p>
<a id="more"></a>

<p>关于GFW对网站的屏蔽的一些简单方法有对域名的屏蔽，对IP的封锁，还有对DNS劫持和污染，让你访问的域名无法解析的真正的IP地址。复杂点的就是对关键字的屏蔽和对流量分析进行屏蔽。对于某些大型的网站服务，比如google，你可以通过搜寻可用的IP，修改本地hosts文件来访问。毕竟这种方法只能绕过少许特定网站，局限性很大，常见梯子的种类一般有以下三种：</p>
<ul>
<li>http/https proxy</li>
<li>socks proxy</li>
<li>vpn</li>
</ul>
<p>一般情况下，这些稳定的服务都是要收费的，网上也能搜到一些免费的账号和工具软件，但都有些限制，比如账户密码不定时改变，就像某种网站的网址一样，还有的有流量限制等，毕竟天下没有免费的午餐。</p>
<h2 id="http-https-proxy"><a href="#http-https-proxy" class="headerlink" title="http/https proxy"></a>http/https proxy</h2><p>对于第一种，基于http/https的代理，简单易用但只有对使用http协议才起作用，一般用于网页浏览。一个比较有名的工具<a href="https://github.com/goagent/goagent" target="_blank" rel="noopener">GoAgent</a>就是利用google提供的Google App Engine服务实现http proxy。下面是GoAgent的工作原理：<br><img src="http://wonesky.qiniudn.com/goagent.jpg-mypic" style="display:block;margin:auto"/><br>你可以利用GAE和GoAgent创建你的http代理服务器。详细教程见<a href="https://github.com/goagent/goagent/blob/wiki/InstallGuide.md" target="_blank" rel="noopener">GoAgentInstallGuide</a>。由于google的IP经常被封，你可能需要<a href="https://github.com/yinqiwen/gscan/" target="_blank" rel="noopener">gscan</a>或者<a href="https://github.com/azzvx/gogotester" target="_blank" rel="noopener">gogotester</a>等工具来扫描测试可用的google IP。由于http是明文传输，安全性比较差,一般使用的不多。主要介绍下第二种和第三种。</p>
<h2 id="socks-proxy"><a href="#socks-proxy" class="headerlink" title="socks proxy"></a>socks proxy</h2><p>SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。具体详见<a href="http://baike.baidu.com/view/262359.htm" target="_blank" rel="noopener">百度百科</a>或者<a href="https://zh.wikipedia.org/wiki/SOCKS" target="_blank" rel="noopener">维基百科</a>介绍。</p>
<p>socks4已经过时了，现在是用socks5代理。我们需要的是一台能没有GFW阻碍的socks5代理服务器，把我们的访问请求转交给它，它把请求传送到目的地，并把请求的结果返还给你。</p>
<h3 id="SSH-socks-proxy"><a href="#SSH-socks-proxy" class="headerlink" title="SSH socks proxy"></a>SSH socks proxy</h3><p>由于socks代理自身并没有什么加密机制，为了安全考虑，可以使用<a href="http://baike.baidu.com/subview/16184/5909252.htm" target="_blank" rel="noopener">SSH</a>（安全外壳协议），来加密连接远程服务器。下图是通过SSH socks proxy访问网站的原理图：<br><img src="http://wonesky.qiniudn.com/whats-ssh.png-mypic" style="display:block;margin:auto"/><br>现在需要一款SSH Client工具和一个SSH账号就可以连通通往自由的大门了。常用的SSH客户端软件有<a href="http://www.bitvise.com/ssh-client-download" target="_blank" rel="noopener">Bitvise SSH Client</a> 和MyEnTunnel，在网上找个免费的或者购买个SSh账号（需要主机名或IP、远程端口号、用户名和密码）就可以连接远程主机了，再通过配置本地代理，使浏览器或某些软件通过梯子联网了。Bitvise SSH Client设置连接远程socks代理服务器见下图，包括远程主机IP或域名地址，远程端口，用户名和密码：<br><img src="http://wonesky.qiniudn.com/ssh%E8%AE%BE%E7%BD%AE.png-mypic" alt="BVssh设置"></p>
<p>然后设置本地代理供浏览器和其它软件使用，Listing Interface设为本地IP：127.0.0.1，Listen Port可以设置为1025~65535中的一个未被占用的端口号，这个设置会为你电脑上的软件服务，在后面的浏览器设置中会用到，下图是我的设置：<br><img src="http://wonesky.qiniudn.com/ssh%E8%AE%BE%E7%BD%AE2.png-mypic" alt="BVssh设置"></p>
<p>在浏览器端firefox或chrome浏览器通过扩展可方便的管理网络的代理 ，使只有特定的网站使用代理，其他的使用本地网络。Chrome使用<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchyOmega</a>，firefox使用<a href="https://addons.mozilla.org/zh-CN/firefox/addon/autoproxy/" target="_blank" rel="noopener">autoproxy</a>，扩展设置时，协议选择SOCKS5，代理服务器填127.0.0.1，端口填写你使用的本地代理端口号，即上步设置的那个Listen Port。SwitchyOmega设置官方详细教程在<a href="https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList" target="_blank" rel="noopener">这儿</a>。设置好后就可以畅游网络了。</p>
<p>福利：两个提供免费ssh账号的网站 <del><a href="http://boafanx.tabboa.com/free/" target="_blank" rel="noopener">http://boafanx.tabboa.com/free/</a></del> 和<a href="http://blog.onlybird.com/getfreessh" target="_blank" rel="noopener">http://blog.onlybird.com/getfreessh</a></p>
<h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><p>Shadowsocks（中文名称：影梭）是一个安全的socks5代理，用于保护网络流量，是一个开源项目，官网shadowsocks.org已被屏蔽，<a href="https://github.com/shadowsocks" target="_blank" rel="noopener">github地址</a>。其原理如下图所示：<br><img src="http://wonesky.qiniudn.com/whats-shadowsocks.png-mypic" alt="shadowsocks原理"></p>
<p>shadowsocks和SSH socks代理使用差不多，需要一个shadowsocks客户端，一个shadowsocks服务端账号，连接后在设置下本地代理。shadowsocks是一个跨平台的，根据你的系统去搜客户端，很容易就找到，实在找不到联系我。使用设置步骤和SSH非常相似，这儿就不多说了。</p>
<p>另外放点福利，一个免费提供shadowsocks账号的网站<a href="http://www.ishadowsocks.net/" target="_blank" rel="noopener">ishadowsocks.net</a>,这个账号每隔6小时密码变更一次。<br>另一个是<a href="http://www.shadowsocks.asia" target="_blank" rel="noopener">shadowsocks中文社区</a>和<a href="http://i.freevpnss.com/" target="_blank" rel="noopener">FreeVPNSS</a>。<br><del>另一个是<a href="http://ssnode.co/" target="_blank" rel="noopener">ssnode.co</a> 的邀请码,这个网站提供每月5G的流量的shadowsocks免费账号。<br>邀请码1：ODY3NWE3NGUwMWM4YTIwZThh<br>邀请码2：zFhYjY1MGIyNWI0MTE0ZTkzY</del></p>
<h2 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h2><p>VPN是虚拟专用网络的缩写，是通过建立虚拟网络连接远程VPN服务器。百度百科上对<a href="http://baike.baidu.com/view/891121.htm" target="_blank" rel="noopener">VPN代理</a>的解释。使用VPN是全部连接都使用代理，只要你连着VPN，所有的联网软件都使用代理连网。</p>
<p>推荐一款我用过的免费VPN——VPNgate，由日本国立筑波大学研究生院为学术研究目的运营，目前已经开源，由志愿者提供主机。但他的主页已被墙，这就造成了梯子在墙的那边的尴尬境地，有了一个就能容易的找到另一个，万事开头难。github上一个提供VPNgate网址镜像和下载的<a href="https://github.com/waylau/vpngate-mirrors" target="_blank" rel="noopener">网址</a></p>
<p>还有一款<a href="https://www.psiphon3.net/zh/index.html" target="_blank" rel="noopener">赛风</a>，它提供了集SSH和VPN于一体的代理软件，服务器账号是自动搜寻的。很方便使用，也比较容易被封，道高一尺魔高一丈，双方都在不断的升级。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如果你对安全要求比较严格，要对免费的提高警惕，就需要搭建自己的代理服务器。并不要只使用上面介绍的单一的代理，你需要去了解下<a href="http://www.theonionrouter.com/" target="_blank" rel="noopener">TOR</a>或者<a href="https://geti2p.net/zh/" target="_blank" rel="noopener">i2p</a>进行多重代理，或者更甚再加上使用虚拟机，隔离代理和上网环境。另外可以看下<a href="https://prism-break.org/zh-CN/all/" target="_blank" rel="noopener">粉碎棱镜</a>项目上提供的安全的软件。</p>
<p>前一段github上<a href="https://github.com/greatfire/wiki" target="_blank" rel="noopener">greatfire</a>遭受来自GFW的DDOS攻击，因为其提供了一些免爬墙就可访问的网站镜像。</p>
<h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>在此只说安卓系统，上面介绍的像赛风，shadowsocks（影梭）在手机都有客户端，另外还有fqroutuer。只有影梭需要你有Shadowsocks账号，而账号上面已有免费的提供了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>俗话说身怀利器，杀心自起，不要以为你有了工具就可以随意干些坏事了，你太低估他们的能力了，只是你还没有那个价值值得去找你。这些只是你减少被束缚的工具，在互联网时代，信息并不是那么容易被垄断的。</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>免费搭建独立博客</title>
    <url>/2015/06/05/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>6月@four日，在这个”你懂得“的日子，小道消息的微信公众号挂掉了。在这个有一条看不见的红线随时都会出现，每个词语都可能成为敏_感词的时代，若想写点东西，还是有必要搭建一个属于自己的博客。</p>
<a id="more"></a>

<p>一个不错的选择是购买空间和域名，用WordPress搭建自己的独立博客。还有一种更酷的选择是在github或gitcafe上利用他们提供的pages服务，创建一个轻量级的博客站点。这样就不需要自己搭建服务器，况且还支持绑定自己的域名。如果你需要申请自己的域名，每年还是需要几十元的域名费的，当然也有提供免费域名的，像<a href="http://www.dot.tk" target="_blank" rel="noopener">tk免费域名</a>。这就是免费或小费用搭建独立博客，今天就介绍下我的博客搭建的过程，主要以github为主，gitcafe和这类似。</p>
<h2 id="github-gitcafe的pages服务"><a href="#github-gitcafe的pages服务" class="headerlink" title="github/gitcafe的pages服务"></a>github/gitcafe的pages服务</h2><p>和代码打交道的应该都知道<a href="https://github.com" target="_blank" rel="noopener">github</a>,它是一个全球知名的代码托管的平台。<a href="https://gitcafe.com" target="_blank" rel="noopener">gitcafe</a>是一个国内提供相同服务的网站。他们提供的pages服务是为了<a href="https://pages.github.com" target="_blank" rel="noopener">Websites for you and your projects</a>,这是github pages的<a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">帮助页</a>,这是gitcafe的<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">帮助页</a>.在帮助页里有详细的关于pages及如何创建使用的介绍。这里注意下github提供两种pages，一种是项目的pages即Project Pages，另一种是用户pages，即User&amp;Organization Pages。我们一般使用第二种，即你建一个username.github.io的代码仓库，等建好后访问username.github.io网址就会转到你的博客，每个用户只能创建一个这种站点。</p>
<h2 id="静态网站生成程序"><a href="#静态网站生成程序" class="headerlink" title="静态网站生成程序"></a>静态网站生成程序</h2><p>静态网站是一种简单的网页，不需要后台数据库支持。静态网站生成器程序帮你做了大部分工作，你只需几个简单的命令就可以很容易的生成页面，修改，发布网页。github上有份静态站点生成器的<a href="https://staticsitegenerators.net" target="_blank" rel="noopener">列表</a>.几个常用的有Jekyll(github pages官网就提供Blogging with Jekyll的说明)<a href="http://jekyllrb.com/" target="_blank" rel="noopener">官网</a>、<a href="http://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>、<a href="http://octopress.org" target="_blank" rel="noopener">Octopress</a>等。我的这个网站是使用Hexo生成的。</p>
<h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>hexo出自台湾大学生<a href="https://twitter.com/tommy351" target="_blank" rel="noopener">tommy351</a>之手，是一个基于Node.js的快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><p>Hexo官网有安装的<a href="http://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">详细说明</a>,安装前提是先安装<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Git是一款免费、开源的分布式版本控制系统。</p>
<p>分别去官网上下载适合你操作系统的安装文件，安装后进行相关配置。安装完git和Node.js后，把node.js安装目录添加Path环境变量，或者在命令行窗口下进入安装目录再执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>如果你的版本没安装EJS, Stylus, Marked not built-in anymore ,请手动安装以下插件，若想安装其它插件，命令类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save </span><br><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<h3 id="Hexo配置使用"><a href="#Hexo配置使用" class="headerlink" title="Hexo配置使用"></a>Hexo配置使用</h3><p>安装完成后，根据自己喜好建立好目录文件夹，在git shell下进入此文件下，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>新建完成后，会出现一些目录，具体情况见<a href="http://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">帮助</a>.然后执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>可以在官网查看<a href="http://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo 常见命令</a><br>在浏览器出输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>,如果出现网页则证明安装成功。还有个页面打不开的可能性是由于google被屏蔽，个别主题页面中默认使用了ajax.google.com 下的js包。在目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes/themename/layout/_partial</span><br></pre></td></tr></table></figure>
<p>在after_footer.ejs和header.ejs中看能否查到带ajax.googleapis.com或fonts.googleapis.com,想办法替换。</p>
<h3 id="主题选择配置"><a href="#主题选择配置" class="headerlink" title="主题选择配置"></a>主题选择配置</h3><p>Hexo提供了多种主题供选择，详情见<a href="http://hexo.io/themes/" target="_blank" rel="noopener">官网主题</a>,我的博客选用的是Jacman。各主题配置见主题的网址。</p>
<p>Jacman 是为 Hexo 设计的一款清新且具有响应式的主题，拥有更丰富的特性并支持了很多的国内服务。Jacman 始于 Pacman 修改而来。详情见github上<a href="https://github.com/wuchong/jacman/blob/master/README_zh.md" target="_blank" rel="noopener">Jacman</a>，<a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/" target="_blank" rel="noopener">如何使用Jacman主题</a>。</p>
<p>我一开始选择的是Pacman，主题已经不更新了，使用的话要自己修改添加需要的东西，后来发现Jacman已经把想要的功能都添加了，就直接改用Jacman了。</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>使用以下命令，会在目录source/_posts/下产生一个“文章名.md”文件，我们就可以使用Markdown语法来写文章了。关于Markdown语法参见<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown语法说明</a>。使用Markdown可以很方便的直接写出你想要的网页版格式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 文章名</span><br></pre></td></tr></table></figure>

<h2 id="配置github并部署博客"><a href="#配置github并部署博客" class="headerlink" title="配置github并部署博客"></a>配置github并部署博客</h2><p>在这大家需要点git代码版本控制的知识，了解git分布式版本控制工具的使用，会简单操作。git相关教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰git教程</a>、<a href="http://www.git-scm.com/book/zh/v1" target="_blank" rel="noopener">Pro git</a> </p>
<p>在github上注册账号，创建username.github.io仓库，然后在本地配置git的用户名和邮箱地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;YOUR NAME&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure>
<p>生成SSh key,输入以下命令然后一路回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>在github网站设置中ssh key 项，把生成的key复制添加到github账户上。<br>测试是否连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="noopener">详情见官网</a>或者参考<a href="http://beiyuu.com/github-pages/" target="_blank" rel="noopener">使用Github Pages建独立博客</a></p>
<p>部署博客，参见<a href="http://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">hexo官网</a><br>在_config.yml 中修改参数，增加类似如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:username/username.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -d</span><br></pre></td></tr></table></figure>
<p>部署到你的github上。</p>
<p>关于404页面，可以在主目录下新建404.html文件。404页面还可以做些有意义的事，可以连接404公益项目，以下是几个404公益项目：</p>
<ul>
<li><a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯公益404</a> </li>
<li><a href="http://yibo.iyiyun.com/Index/web404" target="_blank" rel="noopener">404公益_益云(公益互联网)社会创新中心</a></li>
<li><a href="http://404page.missingkids.org.tw/" target="_blank" rel="noopener">失蹤兒童少年資料管理中心404</a></li>
</ul>
<p>404.html页面代码如下，采用的是腾讯404公益</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="域名绑定与DNS设置"><a href="#域名绑定与DNS设置" class="headerlink" title="域名绑定与DNS设置"></a>域名绑定与DNS设置</h2><p>github或gitcafe会给你分配有个二级域名username.github.io，你也可以绑定到你自己的域名。如果没域名，可以申请个<a href="http://www.dot.tk" target="_blank" rel="noopener">免费tk域名</a>，或者在<a href="https://www.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>上申请个，很好的一点是支持支付宝，像<a href="https://www.name.com/" target="_blank" rel="noopener">name</a>和<a href="https://www.namecheap.com/" target="_blank" rel="noopener">namecheap</a>只支持paypal和比特币。网上有很多优惠码，一般第一年都很便宜，到期后如果续费价格会高些，但可以转到其它域名服务商那里，又成为第一年了。不推荐国内的域名服务商，好像有很多在域名转出或其它情况会有很多手续。另注册cn域名都是要备案的，一般注册国际域名，像.com、.net、.org等，像.me、.us、 .cn这是某个国家的域名后缀。</p>
<p>域名解析即DNS，可以使用国内的<a href="http://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a>，在域名服务商那里把DNS服务器地址设为DNSPod的服务地址，你就可以在DNSPod里设置你域名的各种记录了。</p>
<p><a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/" target="_blank" rel="noopener">github帮助</a>里有具体设置的详细信息。首先在你github里添加名为CNAME的无后缀文件，文件内容为你的域名地址，可以是顶级域名，也可以是二级域名。顶级域名如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wonesky.com</span><br></pre></td></tr></table></figure>
<p>你就要在DNSPod上设置A记录使其指向192.30.252.153 （可能会变动参见<a href="https://help.github.com/articles/my-custom-domain-isn-t-working/" target="_blank" rel="noopener">github</a>）<br>如果使用二级域名像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.wonesky.com</span><br><span class="line">blog.wonesky.com</span><br></pre></td></tr></table></figure>
<p>DNSPod可以设置CNAME记录，指向username.github.io，这样可以避免DNS的IP变化后重新修改。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://beiyuu.com/github-pages/" target="_blank" rel="noopener">使用Github Pages建独立博客</a></li>
<li><a href="http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/" target="_blank" rel="noopener">hexo + github + 多说 来搭建免费博客</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo 你的博客</a></li>
<li><a href="http://jianshu.io/p/5e2bc4e88f32" target="_blank" rel="noopener">Github+Hexo搭建静态Blog小结</a></li>
<li><a href="http://www.zhihu.com/question/20962496" target="_blank" rel="noopener">如何在 GitHub 上写博客？–知乎</a></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
