<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>和时间做朋友</title>
    <url>/2017/01/01/%E5%92%8C%E6%97%B6%E9%97%B4%E5%81%9A%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<p>看了罗胖的“时间的朋友”跨年演讲，罗胖的一种重要的能力，就是能用易懂的语言，把对事物背后的认知向你讲明白。13年的时候知道罗辑思维，看过几期节目，当时也感觉讲的挺有趣的，但总觉得是在刻意找一种新奇的视角去自圆其说的解释一些历史事件或现象。在15年再去听时，就觉得和以前的差别挺大，以更深刻的思考去认知世界。再到“得到”的发行，罗辑思维变为知识服务商，这么短的时间内，发展进步是非常之快，令人震撼。演讲是以创业者身份来看待社会的快速变化，如何从中探索创业机会以及一些方法和经验。下面是我对其的一些介绍和自己的理解。</p>
<a id="more"></a>

<h3 id="创业者"><a href="#创业者" class="headerlink" title="创业者"></a>创业者</h3><p>首先重新定义了创业者，认为符合以下三个条件的都可以叫创业者：试图不断地提高自己的认知，达成更新式的协作，开拓人类文明的新边疆，做一件前所未有的事。还提到创业者的一个品质就是不管外部宏观环境如何变化，创业者总是在关注待解决的问题和正在尝试的方法，因为这就是机会。</p>
<p>那么如果以创业者的心态去思考，去工作，去做事情，我认为同样适用，外部快速的变化，很容易让人浮躁，眼前的问题和方法，能把你拉下来，踏实点。当以创业者的角度去看，你对自己手上的活将会有新的理解，它会让你跳出来站到整体的视角去你做的事情。</p>
<h3 id="时间和注意力"><a href="#时间和注意力" class="headerlink" title="时间和注意力"></a>时间和注意力</h3><p>随着智能手机的快速普及，能连上互联网的基本上都连上了，上网人数基本不会有太大的增长，也就是人口红利消失了，流量红利也基本上不多了。人数就这么多，商家争的就是用户在谁家那花费的时间长。这就是罗胖说的时间战场。方式也有两种：一是让用户上瘾，拖住用户；二是优化用户的时间，提供更好的服务体验，让用户把时间浪费在美好的事物上，这也就是提到的消费升级。</p>
<p>看看吧，那些标题党，那些不时弹出的新闻和小广告，那些醒目的诱惑的图片，商家为了吸引我们的注意力，是煞费苦心啊。网上充斥着各种想要吸引你 的信息，以有限的时间除以无限的信息，一条普通的信息传播出去的命运趋向于传播不出去，互联网上并不是平等的，每个人是都可以在网络上发声，但你发出的声音不一定能传播出去啊。从我们个人的角度来看，我们的注意力，我们的时间是多么容易的被吸引走，是多么的廉价。互联网上有个简单却又长期成功的商业模式：把海量的廉价甚至免费的注意力集中起来高价卖掉，收割廉价甚至免费注意力。我们的注意力才是我们最需要管理的，李笑来提到过注意力的三大坑，分别是：莫名其妙地凑热闹、心急火燎地随大流、操碎了别人的心肝。是不是经常掉进去？</p>
<h3 id="认知迭代和后真相"><a href="#认知迭代和后真相" class="headerlink" title="认知迭代和后真相"></a>认知迭代和后真相</h3><p>这两部分让我了解到一些正在发生变化的社会现象。因为我们有限的认知正在让这个世界脱离而去，在失控。这个世界是碎的，碎的你根本不知道另外一个颗粒里的人搞什么东西，都觉得别人的行为方式古怪，人么互不理解，互不认同。世界因为人性的很多层次，正在悄悄的分裂。对那些各种追星的，各种各样的网红，各种直播，越来越不理解了，看了我也是老了。</p>
<p>关于“后真相(post-truth)”是2016年《牛津词典》的年度词汇，这个词的使用率比在2015年增长了2000％。在维基百科上的解释是：</p>
<blockquote>
<p>后真相政治（post-truth politics）是一种政治文化，亦是当今国际出现的一种新趋势。该词首次出现在塞尔维亚裔剧作家史蒂夫·特西奇（Steve Tesich）于1992年发表在《国家》杂志的文章，在2016年美国总统选举以及2016年英国去留欧盟公投事件期间变得普遍。所谓“后真相”，是指忽视真相、不顾事实的委婉说法。“后真相政治”是“事实胜于雄辩”的相反，即是“雄辩胜于事实”，意见重于事实，立场决定是非，人们把情感和感觉放在首位，证据、事实和真相沦为次要，政治人物说谎不再是为了瞒骗，而是巩固目标群众的偏见，换取共鸣与支持。</p>
</blockquote>
<p>后真相是指情绪的影响力已经超过了事实本身，人们关心的并不是事实，而是立场和态度。这是比较可怕一件事，罗胖称之为共同体危机。</p>
<p>关于人工智能，大数据和人工智能正在开始改变我们的生活，各大科技巨头都在下次的智能革命上发力，不久的未来会有很多岗位会被人工智能取代。有时间再具体的说。</p>
<p>2016年这个大环境下 黑天鹅乱飞的一年，多出了很多意外，我的这一年过的也不算顺利，喜忧参半吧。时间才不管这些，自顾自的流逝，新的一年如期而来。新年第一天，我开通了这个公众账号，想在接下来的一年里，和时间做个朋友，记录下我看到，读到的一些有意思的东西，分享给大家，在时间里也留下点印迹。2017希望把这个公众号写下去，自己要更快乐一点，多发现点美好，有趣的东西，你也是。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习--快速排序</title>
    <url>/2016/09/21/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>这篇来介绍一种应用更广泛的排序算法–快速排序。快速排序顾名思义一般情况下比别的排序算法更快。它也是一种分治的排序算法，在很多编程语言中，对数组，列表进行的非稳定排序在内部实现中都使用的是快速排序。</p>
<a id="more"></a>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>快速排序是把数组切分为两个子数组，递归的对子数组排序。如果子数组是有序的，则整个数组就有序了。步骤如下：</p>
<ol>
<li>从数列中挑出一个元素，称为”基准”（pivot）</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个切分结束之后，该基准就处于数列的中间位置。这个称为切分（partition）操作。</li>
<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>快速排序的示意图如下：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.png-myimg" alt="快速排序示意图"></p>
<h3 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h3><p>这其中有一个关键的操作切分(partition),切分的过程使数组满足:</p>
<ul>
<li>对某个j，a[j]已经排定</li>
<li>a[lo]到a[j-1]中所有元素都不大于a[j]</li>
<li>a[j+1]到a[hi]中所有元素都不小于a[j]</li>
</ul>
<p>切分的一般策略是：</p>
<ul>
<li>先随意的取a[lo]作为切分元素</li>
<li>从数组左端开始向右扫描直到找到一个大于等于切分值的元素(左指针i)</li>
<li>从数组右端开始向左扫描直到找到一个小于等于切分值的元素(右指针j)</li>
<li>交换这两个元素</li>
<li>如此继续，当两个指针相遇或交错时，将切分元素a[lo],和左子数组最右边的元素(a[j])交换，然后返回j即可</li>
</ul>
<p>快速排序切分示意图如下：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png-myimg" alt="快速排序切分示意图"></p>
<p>快速排序切分轨迹图如下：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%88%87%E5%88%86%E8%BD%A8%E8%BF%B9%E5%9B%BE.png-myimg" alt="快速排序切分轨迹图"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo;  <span class="comment">//左侧扫描指针</span></span><br><span class="line">    <span class="keyword">int</span> j = hi + <span class="number">1</span>; <span class="comment">//右侧扫描指针</span></span><br><span class="line">    <span class="keyword">int</span> v = a[lo];  <span class="comment">//切分元素</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从左向右扫描，找到需要交换的元素</span></span><br><span class="line">        <span class="keyword">while</span> (Util.less(a[++i], v))</span><br><span class="line">            <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从右向左扫描，找到需要交换的元素</span></span><br><span class="line">        <span class="keyword">while</span> (Util.less(v, a[--j]))</span><br><span class="line">            <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;      </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查两个指针是否相遇</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        Util.exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将v=a[j]放到正确的位置</span></span><br><span class="line">    Util.exch(a, lo, j);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完成 a[lo .. j-1] &lt;= a[j] &lt;= a[j+1 .. hi]</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序实现"><a href="#快速排序实现" class="headerlink" title="快速排序实现"></a>快速排序实现</h3><p>理解了切分，我们来看下快速排序的代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    Util.shuffle(a); <span class="comment">//打乱原数组，消除对输入的影响</span></span><br><span class="line">    sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">    sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>快速排序的排序过程图如下所示：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%9B%BE.png-myimg" alt="快速排序过程图"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在第一步有个对数组进行打乱的操作shuffle(a)，在将数组排序之前将其打乱,来消除对输入的依赖。排序效率依赖切分数组的效果，而这依赖于切分元素的值。如果没有打乱的操作，情况如下：</p>
<ul>
<li><p>在最好的情况下，快速排序只需要大约nlgn次比较操作。</p>
<p>每次的划分都会恰好从中间将序列划分开来，那么只需要lgn次划分即可划分完成，是一个标准的分治算法Cn=2Cn/2+N，每一次划分都需要比较N次。</p>
</li>
<li><p>最坏的情况(即序列已经排好序)需要大约N^2/2次比较操作。</p>
<p>如果切分不平衡则效率极低，如第一次从最小元素切分，第二次从第二小元素切分，如此这样，每次调用只会移动一个元素。在快速排序前将数组随机排序的主要原因就是避免这种情况。（最坏情况需要约N^2/2次比较（1+2+…+N)。</p>
</li>
<li><p>快速排序平均需要大约2NlnN次比较，来对长度为n的排序关键字唯一的序列进行排序。</p>
</li>
<li><p>快速排序是非稳定性排序。</p>
</li>
</ul>
<p>下面是对数组随机化的代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Random random;    <span class="comment">// pseudo-random number generator</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> seed;        <span class="comment">// pseudo-random number generator seed</span></span><br><span class="line"><span class="comment">// static initializer</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// this is how the seed was set in Java 1.4</span></span><br><span class="line">    seed = System.currentTimeMillis();</span><br><span class="line">    random = <span class="keyword">new</span> Random(seed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = i + uniform(N-i);     <span class="comment">// between i and N-1</span></span><br><span class="line">        <span class="keyword">int</span> temp = a[i];</span><br><span class="line">        a[i] = a[r];</span><br><span class="line">        a[r] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniform</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Parameter N must be positive"</span>);</span><br><span class="line">    <span class="keyword">return</span> random.nextInt(N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ul>
<li><p>切换到插入排序</p>
<p>对于小数组，插入排序会更快，可以在排序小数组时切换到插入排序。将快速排序中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(hi &lt;= lo+M)</span><br><span class="line">&#123;</span><br><span class="line">    Insertion.sort(a,lo,hi);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对小数组使用插入排序，M可以取5~15。</p>
</li>
<li><p>三向切分的快速排序</p>
<p>对于含有大量重复元素的数组，对于一个全部重复的子数组就不需要排序了，上面的算法还是会继续切分排序。这种情况下还有很大的改进空间。我们可以把数组分为三部分，分别对应于大于、等于和小于切分元素的子数组。具体步骤如下：</p>
<p>从左至右扫描数组，维护一个指针lt使得[lo…lt-1]中的元素都比v小，一个指针gt使得所有[gt+1….hi]的元素都大于v，以及一个指针i，使得所有[lt…i-1]的元素都和v相等。元素[i…gt]之间是还没有处理到的元素，i从lo开始，从左至右开始扫描：</p>
<ul>
<li>如果a[i]&lt;v: 交换a[lt]和a[i],lt和i自增</li>
<li>如果a[i]&gt;v:交换a[i]和a[gt], gt自减</li>
<li>如果a[i]=v: i自增</li>
</ul>
<p>三向切分示意图如下：<br><img src="http://wonesky.qiniudn.com/%E4%B8%89%E5%90%91%E5%88%87%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png-myimg" alt="三向切分示意图"></p>
</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort3way</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = lo, i = lo + <span class="number">1</span>, gt = hi;</span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= gt)&#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">        <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) Util.exch(a,lt++,i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) Util.exch(a,i,gt--);</span><br><span class="line">        <span class="keyword">else</span>    i++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    sort3way(a,lo,lt-<span class="number">1</span>);</span><br><span class="line">    sort3way(a,gt+<span class="number">1</span>,hi);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三项切分的过程轨迹图如下：<br><img src="http://wonesky.qiniudn.com/%E4%B8%89%E5%90%91%E5%88%87%E8%BF%87%E7%A8%8B%E5%9B%BE.png-myimg" alt="三向切过程图"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习--归并排序</title>
    <url>/2016/09/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>这篇开始学习稍微复杂一点的排序——归并排序。归并排序是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。（来自<a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">维基百科</a>）</p>
<a id="more"></a>
<h3 id="归并操作"><a href="#归并操作" class="headerlink" title="归并操作"></a>归并操作</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>归并操作就是将两个有序的数组，归并成一个更大的有序数组。<br>归并示意图：<br><img src="http://wonesky.qiniudn.com/%E5%BD%92%E5%B9%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png-myimg" alt="归并示意图"></p>
<p>我们定义一个归并函数merge(int[] a, int lo, int mid, int hi),它会将子数组a[lo…mid]和a[mid+1, hi],归并成一个有序数组，并将结果放在a[lo…hi]中。我们需要做的是：</p>
<ol>
<li>把所有元素先拷到一个辅助数组aux[]中</li>
<li>设置两个游标指针，分别指向两个子数组的首元素</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid +  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//复制a[lo...hi]到aux[lo...hi]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)&#123;</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//归并回a[lo...hi]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>      (i &gt; mid)              a[k] = aux[j++]; <span class="comment">//左半边用尽取右半边元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)               a[k] = aux[i++]; <span class="comment">//右半边用尽取左半边元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[i],aux[j]))  a[k] = aux[i++]; <span class="comment">//左半边的当前元素小于右半边的当前元素，取左半边的</span></span><br><span class="line">        <span class="keyword">else</span>                           a[k] = aux[j++]; <span class="comment">//右半边的当前元素小于左半边的当前元素，取右半边的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下图是归并操作的过程：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BD%92%E5%B9%B6%E8%BF%87%E7%A8%8B.png-myimg" alt="归并过程"></p>
<h3 id="自顶向下归并排序"><a href="#自顶向下归并排序" class="headerlink" title="自顶向下归并排序"></a>自顶向下归并排序</h3><h4 id="原理过程"><a href="#原理过程" class="headerlink" title="原理过程"></a>原理过程</h4><p>自顶向下归并排序是基于上面的归并操作实现的一种递归归并，是分治思想的一个典型例子。</p>
<p>如果能将两个子数组进行排序，我们能够通过归并两个子数组来将整个数组排序。要对数组a[lo…hi]进行排序，可以先将它分成两部分a[lo…mid]和a[mid+1…hi],分别通过递归调用将它们单独排序，最后将有序的子数组归并为最终的排序结果。</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux; <span class="comment">//归并排序辅助数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[a.length]; <span class="comment">//一次性分配空间</span></span><br><span class="line">    sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;<span class="comment">//递归返回条件</span></span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo)/<span class="number">2</span>;</span><br><span class="line">    sort(a, lo, mid); <span class="comment">//左半边排序</span></span><br><span class="line">    sort(a, mid+<span class="number">1</span>, hi); <span class="comment">//右半边排序</span></span><br><span class="line">    merge(a, lo, mid, hi); <span class="comment">//归并结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以排序一个具有15个元素的数组为例，其调用堆栈图为：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88.png-myimg" alt="归并排序调用堆栈"></p>
<p>如果以排序38,27,43,3,9,82,10为例，将合并排序画出来的话，可以看到如下图：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%9B%BE%E7%A4%BA.png-myimg" alt="归并排序图示"></p>
<p>对6 5 3 1 8 7 24 进行合并排序的动画效果如下：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.gif-myimg" alt="归并排序过程"></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们可以通过下面树状图来分析归并排序：</p>
<p><img src="http://wonesky.qiniudn.com/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%88%86%E6%9E%90.png-myimg" alt="归并排序分析"></p>
<ul>
<li><p>对于长度为N的任意数组，自顶向下的归并排序需要1/2 NlgN至NlgN次比较</p>
<p>图中每个节点表示一个sort()方法通过merge()方法归并而成的子数组。这个树正好有n层，对于0到n-1之间的任意k,自顶向下的第k层有2^k个子数组，每个数组的长度为2^(n-k),归并最多需要2^(n-k)次比较。因此每层的比较次数为2^k * 2^(n-k) = 2^n，n层共为n2^n=NlgN。</p>
</li>
<li><p>对于长度为N的任意数组，自顶向下的归并排序最多需要访问数组6NlgN次。</p>
<p>每次归并最多需要访问数组6N次(2N次复制，2N次将排好序的元素移动回去，另外最多比较2N次)，根据上个结论即可得出。</p>
</li>
<li><p>平均时间复杂度为O(nlgn)，需要使用额外空间和N成正比。</p>
</li>
</ul>
<h4 id="一点改进"><a href="#一点改进" class="headerlink" title="一点改进"></a>一点改进</h4><ul>
<li>对小规模子数组使用插入排序</li>
<li>测试数组是否已经有序</li>
<li>不将元素复制到辅助数组</li>
</ul>
<h3 id="自底向上归并排序"><a href="#自底向上归并排序" class="headerlink" title="自底向上归并排序"></a>自底向上归并排序</h3><p>自底向上归并排序是先归并那些微型数组，然后再成对归并得到的子数组，如此这般，直到将整个数组归并到一起。</p>
<p>实现步骤：</p>
<ol>
<li>将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素</li>
<li>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素</li>
<li>重复步骤2，直到所有元素排序完毕</li>
</ol>
<p>也就是先两两归并，再四四归并，再八八归并……即使每一轮归并过程中最后一次归并，第二个子数组可能比第一个子数组元素个数少，但对merge()方法不影响。</p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自底向上的归并排序  logN次两两归并</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortBU</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz += sz)&#123;  <span class="comment">//sz为子数组大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo += sz+sz)&#123; <span class="comment">//lo子数组索引</span></span><br><span class="line">            merge(a,lo,lo+sz-<span class="number">1</span>, Math.min(lo+sz+sz-<span class="number">1</span>, N-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图是自底向上的归并过程：</p>
<p><img src="http://wonesky.qiniudn.com/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E5%BD%92%E5%B9%B6.jpg-myimg" alt="自底向上归并过程"></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul>
<li>自底向上归并排序需要1/2NlgN至NlgN次比较，最多访问数组6NlgN次。</li>
<li>自底向上归并排序适合链表组织的数据。</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>算法</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习--初级排序</title>
    <url>/2016/09/13/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%88%9D%E7%BA%A7%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>文是在学习<a href="https://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-%E7%AE%97%E6%B3%95-%E5%A1%9E%E5%A5%87%E5%A8%81%E5%85%8B/dp/B009OCFQ0O" target="_blank" rel="noopener">算法（第4版）</a> 的归纳总结，这本书被广泛认为是算法入门非常好的教程，以java作为实例语言，图示代码非常丰富，确实是一本非常好的算法书籍。我的练习代码放到了github上：<a href="https://github.com/wonesky/AlgorithmsTest" target="_blank" rel="noopener">https://github.com/wonesky/AlgorithmsTest</a>。</p>
<a id="more"></a>

<h2 id="排序算法概述"><a href="#排序算法概述" class="headerlink" title="排序算法概述"></a>排序算法概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对于排序算法，我们关注的主要对象是重新排列数组元素的算法，其中每个元素都有一个主键。排序算法的目标就是将所有元素的主键按照某种方式排序。排序算法有很多种，在维基百科中有个<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">排序算法</a>的分类，那里有很多介绍，大家可以去看下。下图是wiki上的排序算法列表：<br><img src="http://wonesky.qiniudn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95wiki.jpg-myimg" alt="排序算法列表"></p>
<p>我们可以从三个方面来评价一个排序算法：时间、空间和稳定性。</p>
<ul>
<li><p>时间方面：</p>
<p>  对排序算法的研究时主要关注两点： <strong>比较</strong> 和 <strong>交换</strong>。对不交换元素的算法，那就看访问数组的次数。</p>
<p>  比较次数和交换次数的多少大体上决定了排序算法的快慢，当然初始的排序对不同的算法也有影响。  </p>
</li>
<li><p>空间方面：</p>
<p>  排序算法的额外内存开销也很重要，可以分为两类：</p>
<ul>
<li>原地排序：除了函数调用所需的栈和固定数目变量之外无需额外内存</li>
<li>其他排序： 需要额外内存空间来存储另一份数组副本</li>
</ul>
</li>
<li><p>稳定性：</p>
<p>稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录R和S，且在原本的列表中R出现在S之前，在排序过的列表中R也将会是在S之前。</p>
</li>
</ul>
<h3 id="公用函数"><a href="#公用函数" class="headerlink" title="公用函数"></a>公用函数</h3><p>在具体算法学习之前，先对几乎所有排序算法都能用到的几个通用函数进行抽取，这样后面的算法会显着更精简。主要有三个函数：比较两个元素大小、数组中两个元素的交换和输出显示。</p>
<p>在Java中对于基本数据类型，我们可以直接使用比较符号来判断大小。对于对象类型，我们对实现了Comparable接口的对象，使用compareTo()函数来比较大小。因此，下面每个函数的代码，都写了两个：一个是对int类型的，一个是对实现Comparable接口对象的，后一种会更通用。</p>
<ul>
<li>比较两个元素大小</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组中两个元素的交换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Object temp = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>输出显示</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些通用函数，我把他们放在单独的文件Util.java中了，方便其他各种排序函数对它们的调用。</p>
<h2 id="初级排序算法"><a href="#初级排序算法" class="headerlink" title="初级排序算法"></a>初级排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>冒泡排序是一种简单的排序算法。它的原理如下：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Util.less(a[j+<span class="number">1</span>], a[j]))</span><br><span class="line">                Util.exch(a, j, j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>冒泡排序对n个元素需要O(n^2)的比较次数，且可以原地排序。在最坏的情况，冒泡排序需要 O(n^2)次交换</p>
<p>冒泡排序是稳定排序算法</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>设置一个标志，当比较一趟，如果没有发生交换，说明已经排序好了，不需要继续再去比较了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">boolean</span> swapped;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        swapped = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Util.less(a[i+<span class="number">1</span>],a[i]))&#123;</span><br><span class="line">                Util.exch(a, i, i+<span class="number">1</span>);</span><br><span class="line">                swapped = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">while</span>(swapped);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>选择排序的步骤如下：</p>
<ol>
<li>从左至右遍历，找到最小(大)的元素，然后与第一个元素交换。</li>
<li>从剩余未排序元素中继续寻找最小（大）元素，然后与第二个元素进行交换。</li>
<li>以此类推，直到所有元素均排序完毕。</li>
</ol>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="comment">//i之前是排序好的，从i+1开始，找最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[j], a[min]))</span><br><span class="line">                min = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最小值和第i个元素交换</span></span><br><span class="line">        exch(a, i, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图是选择排序的的过程：<br><img src="http://wonesky.qiniudn.com/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.png-myimg" alt="选择排序过程"></p>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>选择排序需要1+2+3+…+(N-1)=N(N-1)/2 ~ N^2次比较。</p>
<ul>
<li><p>运行时间与输入无关：</p>
<p>随机排序的和已经排序好的数组需要相同次数的比较。在最好的情况下，即所有的排好序，需要0次交换，最差的情况，倒序，需要N-1次交换。</p>
</li>
<li><p>数据移动是最少的：<br>每次交换都会改变两个数组元素的值，交换次数和数组大小线性关系。</p>
</li>
</ul>
<p>选择排序是非稳定排序</p>
<p>下图是不同情况下的输入，选择排序的排序比较：<br><img src="http://wonesky.qiniudn.com/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%AF%94%E8%BE%83.gif-myimg" alt="选择排序比较"></p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j-<span class="number">1</span>]); j--)</span><br><span class="line">            exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图是插入排序的的过程：<br><img src="http://wonesky.qiniudn.com/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.gif-myimg" alt="插入排序过程"></p>
<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>插入排序所需时间取决于输入中元素的初始顺序。</p>
<ul>
<li><p>插入排序需要的元素交换的次数等于序列中逆序元素的对数。</p>
<p>元素比较的次数最少为元素逆序元素的对数，最多为元素逆序的对数 加上数组的个数减1。</p>
</li>
<li><p>平均需要大约N^2/4次比较和N^2/4次交换</p>
</li>
<li><p>最坏情况需要大约N^2/2次比较和N^2/2次交换。</p>
<p>那就是所有的元素逆序排列，那么第i个元素需要与前面的i-1个元素进行i-1次比较和交换，所有的加起来大概等于N(N- 1) / 2 ~ N2 / 2，</p>
</li>
<li><p>最好的情况需要N-1次比较和0次交换</p>
<p>  所有元素都排好序，只需要从第二个元素开始都和前面的元素比较一次即可，不需要交换，所以为N-1次比较和0次交换。</p>
</li>
</ul>
<p>插入排序是稳定排序。</p>
<p>下图是不同情况下的输入，插入排序的排序比较：<br><img src="http://wonesky.qiniudn.com/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E6%AF%94%E8%BE%83.gif-myimg" alt="插入排序比较"></p>
<p>总体来说，插入排序对于部分有序序列以及元素个数比较小的序列是一种比较有效的方式。</p>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。</p>
<p>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率。但对于大规模乱序数组插入排序很慢，因为它只会交换相邻的元素，每次只能将数据移动一位。</p>
<p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。</p>
<p>如下图，我们对下面数组进行排序的时候，首先以4为步长，这是元素分为了LMPT，EHSS，ELOX，AELR几个序列，我们对这几个独立的序列进行插入排序，排序完成之后，我们减小步长继续排序，最后直到步长为1，步长为1即为一般的插入排序，他保证了元素一定会被排序。<br><img src="http://wonesky.qiniudn.com/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E6%AD%A5%E9%95%BF.png-myimg" alt="希尔排序步长"></p>
<p>希尔排序的关键在于步长递减序列的确定，任何递减至1步长的序列都可以，目前已知的比较好的序列有：</p>
<ul>
<li>Shell’s 序列: N/2 , N/4 , …, 1 (重复除以2);</li>
<li>Hibbard’s 序列: 1, 3, 7, …, 2k - 1 ;</li>
<li>Knuth’s 序列: 1, 4, 13, …, (3k - 1) / 2 ;该序列是本文代码中使用的序列。</li>
<li>已知最好的序列是 Sedgewick’s (Knuth的学生，Algorithems的作者)的序列: 1, 5, 19, 41, 109, ….</li>
</ul>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h &lt; N/<span class="number">3</span>)</span><br><span class="line">        h = h * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j],a[j-h]); j -= h)</span><br><span class="line">                exch(a, j, j-h);</span><br><span class="line">        &#125;</span><br><span class="line">        h = h / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图是希尔排序的的过程：<br><img src="http://wonesky.qiniudn.com/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.gif-myimg" alt="希尔排序过程"></p>
<h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>希尔排序的分析比较复杂，上述实现算法，它的运行时间达不到平方级别。最坏的情况比较次数和N^(3/2)成正比。<br>非稳定排序</p>
<p>下图是不同情况下的输入，希尔排序的排序比较：<br><img src="http://wonesky.qiniudn.com/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E6%AF%94%E8%BE%83.gif-myimg" alt="希尔排序比较"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>算法</tag>
        <tag>冒泡排序</tag>
        <tag>选择排序</tag>
        <tag>插入排序</tag>
        <tag>希尔排序</tag>
      </tags>
  </entry>
  <entry>
    <title>把时间当作朋友</title>
    <url>/2016/09/09/%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E4%BD%9C%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<p><strong>一切靠积累</strong></p>
<a id="more"></a>
<ul>
<li><p><strong>提升元认知能力</strong></p>
<blockquote>
<p>你的大脑并不是你，你的大脑（属于）”你的”大脑</p>
</blockquote>
<p> 有意识地控制大脑，而不是无意识的受大脑控制。</p>
<p> 看看每天自己做的事情里，有多少是尽管无趣却非常重要的，有多少是非常有趣却不重要的。</p>
</li>
</ul>
<h2 id="现实"><a href="#现实" class="headerlink" title="现实"></a>现实</h2><ul>
<li><p><strong>不要期待速成，而是靠积累</strong></p>
<p>   <strong>交换</strong>：我有 换 我想</p>
</li>
<li><p><strong>警惕“完美主义”</strong></p>
</li>
<li><p><strong>忍受一定的未知</strong></p>
<p>  尽量避免 总是想“马上解决当时不可能解决的问题”。不断地尝试着去适应“在未知中不断前行”</p>
<p>  方法：当有问题解决不了时，可以先把它记下来，然后继续前行。注意，一定要把它们记下来。</p>
</li>
<li><p><strong>现状无法马上摆脱</strong></p>
<p>陷阱：对现状不满、急于摆脱现状。</p>
<p>不要“骑驴找马”的工作态度，不要被自己的“梦想”所绑架。</p>
<p>接受现状，积累能用的。</p>
</li>
<li><p><strong>用正确的方法做正确的事情</strong></p>
<blockquote>
<p>“用正确的方法做正确的事情，并在最后期限之前漂亮地完成”</p>
</blockquote>
<p>  正确的方法是什么？<br>  判断是否是正确的事情：看是否现实<br>  什么是现实？</p>
</li>
</ul>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><ul>
<li><p><strong>估算时间</strong></p>
<p>  做任何事情之前先判断其熟悉程度（或陌生程度），再据此判断估算完成任务所需要的时间。</p>
<p>  侯世达法则</p>
<blockquote>
<p>完成一个任务实际花费的时间总会超过计划花费的时间，就算制定计划的时候考虑到本法则，也不能避免这种情况的发生。</p>
</blockquote>
<p>  执行任务中发生的意外，因为对它不熟悉，没考虑到意外，及应对的办法，任务就容易延期。</p>
<p>  你清楚地了解该任务的每一个环节，知道应该如何拆解任务、应该怎样分配拆解出来的⼦任务、每一个子任务有多少个步骤、每一个步骤需要耗费多少时间、哪些步骤需要格外小心……在这种情况下，正确估算完成任务需要的时间是很容易的。</p>
<p>  我们必须处理未知，而从陌生到熟悉，就需要花费时间去学习，这个过程无法逾越。</p>
</li>
<li><p><strong>及时开始</strong></p>
<p>  所谓做事拖延，不是拖延着做事，而是拖延着不开始做事。</p>
<p>  原因：恐惧。</p>
<ol>
<li><p>来自内部：只要开始做事，就要面临做错、做不好的风险。</p>
</li>
<li><p>来自外部：过分在意外界评价。</p>
<p>只要做事，就一定会出问题。这是现实。接受现实，勤能补拙。“现在就开始”</p>
</li>
</ol>
</li>
<li><p><strong>直面困难</strong></p>
<p>  效率低下的原因：回避困难。</p>
<p>  任务：相对简单部分，困难部分</p>
<p>  动机：奖励，惩罚。趋利避害。</p>
<p>  反应：对奖励：1.再次来过，2.见好就收。对惩罚：1.再也不做，2.挣扎着找出路。</p>
<p>  倾向：做简单的部分，获得奖励。</p>
<p>  要做的：控制逃避困难的倾向，忍受枯燥，挣扎着找出路。</p>
</li>
<li><p><strong>关注步骤</strong></p>
<p>  what、why、how。更需要关注how方法。</p>
<p>  不停的细分、拆解任务，越具体越好，直至每个小任务都可以由一个人独立完成。</p>
<p>  对任务的每一次“具体化”与“细分拆解”都要反复询问“原因”</p>
<p>  要学着像一个项目管理者那样思考——他们更多地关注“方法”，他们会花费比别人更多（多出许多倍）的时间去落实每一个步骤，在确认无误之后，他们才会有效地分配任务，团队才能够切实可靠地完成任务。</p>
<p>  <strong>在做任何事情之前，通过关注“方法”去反复拆分任务，最终确认每个小任务都是可完成的，把这个养成习惯。</strong></p>
</li>
<li><p><strong>并行与串行</strong></p>
<p>  打造多任务操作系统的两种方法：</p>
<ol>
<li><p>并行任务。</p>
<p> <strong>养成一个习惯——把要做的事情用纸笔写出来，把任务落到纸面上，就可以比较容易地分辨出哪些任务是简单而又机械的，哪些任务是相对复杂而又灵活的（对我个人来讲，需要思考的就是“非机械”的），然后，尝试把一个非机械的任务和一个机械的任务搭配起来完成。</strong></p>
<p> 并行两个任务的一个重要前提是执行者足够了解这两个任务，且对自己有足够清楚的认识，即，对执行者来说，这两个任务是“主动并行”的。被动发生的并行任务往往只能使效率变得更为低下。</p>
</li>
<li><p>切分自己的时间。</p>
<p> 把自己的时间切分成“时间片”是一种很难习得的能力。应用这种能力时，要先坐下来制定一个工作列表，把任务罗列出来，然后把自己的时间“切片”。我通常把“20分钟工作+5分钟休息”作为一个时间片，然后就开始像处理器那样处理任务。每个时间片执行一个任务，时间片用完，挂起任务执行下一个任务，如此循环。</p>
</li>
</ol>
</li>
<li><p><strong>感知时间</strong>  <strong>记录开销</strong> <strong>制定预算</strong></p>
<p>  “相信我，你并不孤独”。<br>  了解时间，精确感知时间。更准确的估算时间</p>
<p>  想尽一切办法真正了解自己、真正了解时间、精确感知时间，而后再想尽一切办法使自己以及自己的行为与时间“合拍”。</p>
<p>  <strong>养成每天记录“事件-时间日志”的习惯</strong></p>
<p>  <strong>养成每天制作时间预算的习惯：</strong></p>
<p>  任务列表、标注权重（分3级就行），重要和显得重要，不重要和显得不重要，<br>  紧急和显得紧急</p>
<p>  判断一项任务是否“真的重要”其实只需要一个标准：这项任务的完成是否确实对目标达成有益。</p>
</li>
<li><p><strong>计划</strong></p>
<p>  计划成功的前提：目标现实可行。</p>
<p>  怎么确定可行？（有什么更好的方法？）</p>
<p>  1.已经有人做到了 2.我与那个人没有太大差距。  多长时间？</p>
<p>  我们更常面临的尴尬是：如果不开始行动，根本就无从判断目标是不是确实可行，或者反过来，目标是不是确实不可行。于是，往往只有开始行动之后，才能做出正确的判断。在行动过程中，如果发现既定的目标确实是不现实、不可行的，那么“半途而废”不仅不意味着失败，反而意味着决策者的无比理智。</p>
<p>  长期计划是需要通过实践才能习得的能力</p>
<p>  计划总是被变化打乱的深层次的原因在于：计划过于长远。拥有它需要挣扎、需要努力、需要从一点一滴做起。</p>
<p>  <strong>养成做计划的习惯，从短期到长期。（不可着急）</strong></p>
<p>  行动更重要，行动是改变自己的众多方法中最有效、最直接的方法。</p>
<p>  有些时候没必要做计划</p>
<p>  没必要做计划的原因主要有两个，除了前面提到过的“任务其实非常简单”之外，另一个原因是“初始状态下，我们往往并没有能力去制定合理有效的计划”。做任何事情，都可能经历相同的过程：逐步熟悉，小心摸索，失败、失败、再失败，认真反思，卷土重来，直至成功。</p>
<blockquote>
<p>在大多数情况下，我的建议是这样的：如果想要改变自己，或者对自己目前的处境不满意，那就一切从简——找一个你觉得应该会带来改变的任务，然后去做就是了。不要怕碰壁，不要怕失败，那是必须经历的过程。失败并不可怕，因为人总是要失败许多次才会有结果，况且全天下又不是只有你会失败，怕什么？达成目标的关键在于每次受到挫折之后能否汲取教训。只要能汲取教训，然后自我调整，那就是进步。我们一生所做的事，大多都是试错（Trial and Error）的过程，对于人生，没有⼈能像解释数学或物理学原理那样给出普适的公式。永远记住，马上行动是最重要的——尽管这句话已经被无数人说过无数次。</p>
</blockquote>
</li>
<li><p><strong>列表</strong></p>
<p>  制作列表、运用列表确实是一种需要练习的重要能力</p>
<p>  工具：纸和笔，随身携带。 列表不一定要工整。一定触手可及</p>
<ul>
<li><p>最重要的任务只有一个。</p>
</li>
<li><p>制作专门的下一阶段任务列表：</p>
<p>  除非万不得已，否则千万不要在整个任务完成之前中途更改列表中的项目。有了新主意，再新启用一个列表“下一阶段任务列表”。马上回到当前的任务列表，专注在现在应该完成的任务上。</p>
</li>
<li><p>给每个任务制定一个核对列表：</p>
<p>  给实施计划、完成任务列表中的项目，提前制定一个检查列表，来保证当前任务确实能如预期完成。</p>
<p>  列表一旦开始运作，就一定要执行到底。放弃的方法有很多种， 最常见的是“换一个更好的方向”</p>
</li>
</ul>
</li>
<li><p><strong>流程</strong></p>
<p>  要想加快执行重复性任务的速度，只需在遇到重复性任务时先将其做完一次，然后马上总结、整理，搞清流程，再靠进一步的实践把它变成“闭着眼睛也能做好”的事。这是提高效率、减少失误的根本手段。</p>
<p>  在梳理流程的过程中，会不由自主地思考个中细节。有些人做事仔细，其实只不过是因为他们很早就养成了这个简单的习惯而已。</p>
<p>  <strong><em>为常见任务制定流程是一个必须养成的习惯</em></strong></p>
</li>
</ul>
<ul>
<li><p><strong>预演</strong></p>
<p>  我在做任何事情之前，都会尝试把将要做的事情的整个过程在脑子里预演一遍甚至数遍。</p>
<p>  如果面临的任务比较复杂，大脑短期记忆容量不够，可以借助纸和笔或思维导图，写写画画辅助自己预演。</p>
</li>
<li><p><strong>验收</strong></p>
<p>  给自己执行任务时的表现设计一个验收机制。最基本的验收机制是针对结果的，将任务拆分为子任务，对每个子任务设计验收机制。</p>
</li>
</ul>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul>
<li><p><strong>效率本质</strong></p>
<p>  不要拒绝学习。任何知识的获取都是不可逆的。</p>
<p>  任何一个人如果曾经有最终习得某种技能的经验，就会知道在习得的那一瞬间，整个世界都会为之改变。  因为有能力做更多的事了。</p>
</li>
<li><p><strong>基本途径</strong></p>
<p>  获取知识的途径：体验、试错、观察、阅读和 <strong>正确的思考</strong>。<br>  “阅读”突破了个人“体验”或者“试错”的种种局限<br>  “正确地思考”，才是获取真正意义上的知识的主要手段</p>
<p>  学习过程（或者说知识传递过程）中最大的障碍——经验主义。不仅存在无法通过个体或者群体经验获得的知识，还存在与现有经验相悖的知识。</p>
<p>  日常生活中主要的“沟通障碍”本质上几乎都是由于沟通双方无法让对方理解与他们的经验相悖的知识或信息造成的。</p>
<p>  美国前第一夫人罗莎琳·卡特就观察到了这样一个现象：“优秀的领导，能够把人们带到他们想去的地方；而卓越的领导，能够把人们带到他们应该去但是没想过要去的地方。”</p>
</li>
<li><p><strong>自学能力</strong></p>
<ul>
<li><p>自学能力的基础是阅读理解能力</p>
</li>
<li><p>检索能力监理在相当熟练的阅读理解能力的基础之上。</p>
<p>  善于利用图书馆和搜索引擎查找有效信息</p>
</li>
<li><p>写作能力在自学能力中占据重要的位置</p>
<p>  写出简洁、有效、准确、朴素、具体的说明性和说理性文章的能力。</p>
</li>
<li><p>实践能力是自学能力最终转化为真正价值的根本</p>
<p>  知道自己需要的是什么之后，真正的学习才算开始。</p>
</li>
<li><p>永远保持开放的心态</p>
<p>  大脑有一个运行机制叫“选择性输入”</p>
<p>  最好固定一段时间来把那些目前暂时无法理解的、支持的、反对的、无所谓的论点和观点记录下来。对无法理解的，写下自己当时的疑惑何在；对支持的，记录及个理由或者实例；对反对的，同样记录几个理由或者实例；甚至对那些无所谓的，也记录其原因。</p>
<p>  一个有着这样良好记录习惯的人会获得他人无法拥有的处理信息和知识的能力——“反刍”。“反刍”能力是我们避免成为“选择性输入”受害者的重要保障。</p>
</li>
<li><p>了解学习的进程</p>
<p>  在学习的时候，进展和时间的关系肯定不是线性的。这个曲线应该是一个并不规则，上下起伏，但总趋势上升的曲线。<br>  <img src="http://wonesky.qiniudn.com/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B.jpg" alt="学习过程"></p>
</li>
</ul>
</li>
</ul>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li><p><strong>勤于思考</strong><br>  独立思考，只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看得出结论的过程有没有漏洞，有没有不合理的地方，衡量一下结论到底有多少道理的过程。</p>
<p>  在常见的思维谬误中，“诉诸权威”与“诉诸情感”一样被列为有逻辑错误嫌疑的辩论方式。<br>  诉诸权威，本质上源自人们对确定的渴求。权威和正确不是一回事，权威不一定正确或者权威表达了正确。</p>
<p>  我们的思维误区中有一个盲点被称为“厢情愿”</p>
</li>
<li><p><strong>思维陷阱</strong><br>  <a href="https://en.wikipedia.org/wiki/List_of_fallacies" target="_blank" rel="noopener">List of fallacies</a></p>
<p>  犯这些逻辑错误最重要的原因有两个——概念不清和拒绝接受不确定性</p>
</li>
<li><p><strong>因果关系</strong></p>
<p>  “因为A，所以B”： 1、A不一定是B的理由 2、A不一定是B的唯一理由 3、A不一定是B最重要的理由。</p>
<p>  另一个需要注意的非常重要的情况是，有些时候，相关联的两者间是“互为因果”的</p>
<ul>
<li><p><strong>双盲测试</strong></p>
</li>
<li><p><strong>自证预言</strong></p>
<p>如果人们相信某件事情会发生（事实上其原本并不见得一定会发生），那么这件事情最终真的会发生。</p>
</li>
</ul>
</li>
<li><p><strong>逆命题</strong></p>
<p>  原命题和逆命题关系的问题：</p>
<blockquote>
<p>原命题：若p，则q 它的逆命题：若q，则p；它的否命题：若¬p，则¬q；它的逆否命题：若¬q，则¬p.原命题为真，其逆命题不一定为真，其否命题不一定为真，其逆否命题一定为真。</p>
</blockquote>
</li>
<li><p><strong>举证责任</strong></p>
<p>  “谁主张谁举证”。</p>
<p>  对立双方举证难度并非总是对称的：1、举证难度受举证方能力的影响，因为每个人的学识和专业不同。2、举证难度受当时所在社会的整体知识水平（甚至文化）的影响 3、举证难度还受需要证明的结论与当时社会普遍接受的知识相符程度的影响</p>
</li>
<li><p><strong>案例局限</strong></p>
<p>  容易“以偏概全”</p>
</li>
<li><p><strong>对立论证</strong></p>
<p>  人们可能基于同样的原因做出截然相反的决定。用同样的论据证明截然相反的论点。同样的现象，截然相反的解释。</p>
<p>  要认识到对立论证的情形，提高思考能力，辨别合理和现实。</p>
</li>
<li><p><strong>张冠李戴</strong></p>
<p>  论点和论据之间尽管全无逻辑联系，却可以以一种“显然合理”的姿态绑在一起。</p>
<p>  偷换概念  逻辑能力</p>
</li>
<li><p><strong>感悟与道理</strong></p>
<p>  “道理”应该是普适的，而“感悟”只来自个体经验。<br>  成功者的经验一定要仔细分辨。</p>
<ul>
<li><p>成功者其实没有必要、没有义务，也往往没有足够的时间去讲述所有的细节。</p>
</li>
<li><p>几乎所有的成功者，在讲述自己成功经历的时候，都会有意无意地夸大自己为成功所付出的代价，夸大曾经面临和战胜的困境，夸大自己最终成功的难度。</p>
</li>
<li><p>讲述自身经历时产生偏差。</p>
<pre><code>认知偏差</code></pre><p>与其关注成功者，不妨反其道而行之——努力从失败者身上汲取经验</p>
</li>
</ul>
</li>
<li><p><strong>克服恐惧</strong></p>
<p>  恐惧以及恐惧带来的懦弱。恐惧需要克服，勇气需要培养（积累）。</p>
<p>  强与弱。</p>
</li>
<li><p><strong>辅助工具</strong></p>
<p>  语言和思考。<br>  不要说类似的句子：</p>
<ul>
<li><p>…本来（原本）就是嘛</p>
</li>
<li><p>…难道就没有一点可取之处吗</p>
</li>
<li><p>我发现……还是很有一些道理的</p>
</li>
<li><p>要是 ……就好了</p>
<p>一些有助于思考的句型：</p>
</li>
<li><p>…是一回事，而…是另一回事</p>
</li>
<li><p>…和…其实根本上不是一回事</p>
</li>
<li><p>…不一定…</p>
</li>
<li><p>…,可是，这并不意味着…</p>
</li>
<li><p>…也许还有另一种可能性（解释）</p>
</li>
<li><p>…看起来像…,可是…</p>
</li>
<li><p>…而事实却可能远比看起来更为复杂（简单）</p>
</li>
<li><p>……。然而，（这个论断）反过来（陈述）却不一定成立……</p>
</li>
<li><p>……其实很可能与……根本就没有任何关系。</p>
</li>
<li><p>……和……之间不一定是单纯的因果关系，它们也可能互为因果</p>
</li>
<li><p>……和……之间的比较也许没有任何意义。</p>
</li>
<li><p>……其实不过是表面现象，其背后的本质是……</p>
</li>
<li><p>……有一个通常被忽略的前提。</p>
</li>
<li><p>……尽管听起来很有道理，然而却完全不现实。</p>
</li>
<li><p>……也许有人会说……，但是这种质疑却……</p>
</li>
</ul>
</li>
</ul>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><ul>
<li><p><strong>学会倾听</strong></p>
<p>  注意大脑的“模式拼接”能力的利和弊。 这种能力依赖一定程度的已知信息。因此必须想办法获得一种或者某些能够用于鉴定已知信息有效性的知识。（判定类知识）</p>
<p>  对“有心人”来讲，这是一场正常的、必须的、不可回避的、旷日持久的，甚至最终是有趣的、一个人的战斗。不断收集、整理、修正自己的判定类知识，就好像是为自己编织一张“滤网”，以阻止无效的概念类知识的进入。同时，这张“滤网”也应该是双向的，可以把概念类知识中有效的部分留下，而把无效的部分排除。所谓“有心”，其实就是指有这张“滤网”。人与人“滤网”质量的区别，很可能就是人们所说的思考能力的区别。</p>
<p>  克制过早质疑</p>
<p>  在倾听的过程中，我们可以利用多余的脑力处理两个方向的信息：“回顾”与“预期”。<br>  我们还要养成一个重要的习惯：一旦决定倾听，就要主动帮助说者进入“倾诉”状态。<br>  有效倾听、有效理解的关键在于那些隐含的信息</p>
</li>
<li><p><strong>说与不说</strong><br>  通过努力、通过积累成为能说更多话的人。</p>
<p>  一定要想办法不时做出令人敬佩的事情，这样就会有人主动找你做朋友。</p>
<p>  赢得尊重是最不能急于求成的，只能靠积累获得。</p>
</li>
<li><p><strong>共生状态</strong></p>
<p>  讨论的三个原则：</p>
<ul>
<li><p>有意义的讨论的前提是双方不仅要“相互竞争”，更要“相互合作”</p>
<p>  “遵守理性讨论基本原则”</p>
<blockquote>
<p>瓦茨拉夫·哈维尔先⽣制定的《对话守则》：</p>
</blockquote>
<ol>
<li>对话的目的是寻求真理，不是为了斗争。</li>
<li>不做人身攻击。</li>
<li>保持主题。</li>
<li>辩论时要用证据。</li>
<li>不要坚持错误不改。</li>
<li>要分清对话与只准自己讲话的区别。</li>
<li>对话要有记录。</li>
<li>尽量理解对方。</li>
</ol>
</li>
<li><p>真理是独立存在的，它从来不会依附于任何个人或者集体</p>
<p>  “自以为是”</p>
</li>
<li><p>真理不变，也不会因任何人而变；不停变化的只是人们对真理的解释或者理解。</p>
</li>
</ul>
</li>
<li><p><strong>正确复述</strong></p>
<p>  当我们听对方（这里仅限于面对面沟通，不讨论书面沟通）说完之后，应该自觉避免自以为是地认为自己肯定理解对了。我们不妨套用以下句式进行验证、反馈：</p>
<blockquote>
<p>“你的意思是……，是吗？”</p>
</blockquote>
</li>
<li><p><strong>勤于反思</strong></p>
<p>  每个人都可能出现“只看到部分事实”的情况</p>
<ul>
<li><p>深刻了解经验的局限</p>
</li>
<li><p>时时刻刻保持警惕</p>
<p>  经验需要归纳，更需要经过演绎来论证。</p>
</li>
<li><p>使用记录，使自己能够记住更多的经验</p>
</li>
<li><p>通过观察和阅读汲取他人的经验</p>
</li>
<li><p>经常试用类比来跨越未知与已知的障碍</p>
</li>
<li><p>耐心等待以获得不能跨越时间的经验</p>
<p>  遇到不理解的问题，遇到不确定的想法，最好马上记录下来。</p>
</li>
</ul>
</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li><p><strong>兴趣</strong></p>
<p>  往并不是有兴趣才能做好，而是做好了才有兴趣。</p>
<p>  若是因为自己没有做好而不喜欢，就要考虑另一个问题：做好这件事情究竟对自己有没有意义？如果有，那就要努力做，直到做好为止。</p>
<p>  培养孩子兴趣正确的做法是：根据孩子的情况，选出孩子最可能做得比别人好的事情（这很可能已经是极其耗时费力的了）；然后还要绞尽脑汁让孩子学得会、做得好、做得比一般人好、做得比谁都好——兴趣就自然出现了。</p>
</li>
<li><p><strong>方法</strong></p>
<p>  与其不停地寻找“更好的方法”，还不如马上开始行动。</p>
<p>  相比于坚持（重复，大量时间的投入），方法其实显得并不重要，并且好方法是因人而异的。</p>
</li>
<li><p><strong>痛苦</strong></p>
<p>  对痛苦的深刻感受，会扭曲或者抹杀人们感知其他事物的能力。我们很容易放大自己对痛苦的感受。</p>
<p>  要学会在痛苦出现的时候运用心智把自己的注意力转移到其他地方去</p>
<p>  人类的大脑有种一种自我保护功能——遗忘痛苦。不必过分害怕痛苦。这也有可能导致—“反复重犯以往错误”，犯错后的痛苦遗忘。</p>
</li>
<li><p><strong>比较</strong></p>
<p>  比较是相对的，相对是永远没有尽头的。</p>
<p>  要去分辨哪些幸福和快乐是无需比较也可以获取的，然后花时间在寻找甚至制造那些无须比较就可以获得的快乐与幸福上。</p>
<p>  比成功更重要的是成长。</p>
</li>
<li><p><strong>运气</strong></p>
<p>  运气，只不过是因小概率事件发生而产生的感受而已。</p>
<p>  不能相信运气与我有关</p>
</li>
<li><p><strong>人脉</strong></p>
<p>  交换</p>
<p>  比人脉更重要的是他所拥有的资源</p>
<ol>
<li><p>承认自己能力有限；</p>
</li>
<li><p>不怕在别人面前露怯；</p>
</li>
<li><p>敢于不去证明自己是“好人”</p>
<p>与人交往也是一种需要学习，并且也需要耗费大量时间实践的技能。</p>
<p>别高估自己，误以为自己有足够的时间可以妥善地处理与周边所有人的关系。</p>
<p>真正的关心最终只有一种表现：为某人某事心甘情愿地花费时间，哪怕“浪费”时间。</p>
<blockquote>
<ul>
<li>专心做可以提升自己的事情，学习并拥有更多、更好的技能，成为那个值得他人交往的人。</li>
<li>学会独善其身，以不给他人制造麻烦为美德，用自己的独立赢得尊重。</li>
</ul>
</blockquote>
</li>
</ol>
</li>
<li><p><strong>自卑</strong></p>
<p>  愿望中的自己、真实的自己、感觉中的自己</p>
<p>  这三个的不一致，这种扭曲来自 不可靠且容易受影响 的感觉。</p>
<p>  有时候，整个社会向他灌输的观念可能是错误的。</p>
<p>  优秀的人更容易自卑。</p>
<ul>
<li>停止嘲弄他人</li>
<li>忘记自己的优点。在自己的语言中把“优点”和“缺点”替换成特点。</li>
<li>适当地放纵一下自己</li>
</ul>
</li>
<li><p><strong>灵感</strong></p>
<p>  灵感是平时的积累的效果。</p>
<p>  这些博学之人不见得是在“什么都知道”之后才将其写出来的，他们很可能是为了写出来才去搜索、积累，并发现了那些令我们惊奇的内容。</p>
<p>  确定一个方向和目标，积累素材。“对特定信息的注意力” “鸡尾酒效应”。有了特定目标，就更容易发现相关素材。</p>
</li>
<li><p><strong>鼓励</strong></p>
<p>  永远鼓励身边的人，哪怕多少有些盲目。</p>
</li>
<li><p><strong>效率</strong></p>
<p>  任何人都不可能100%地有效率，至少不可能总是100%地有效率</p>
<p>  做时间预算的时候，一定要留有空间</p>
</li>
<li><p><strong>节奏</strong></p>
</li>
</ul>
<p>想办法提前预知自己需要掌握哪些技能，再确定它们是自己可以通过练习真正熟练掌握的技能，而后制定长期计划，一点一点稳步执行。</p>
<ul>
<li><p><strong>物极必反</strong></p>
<ul>
<li><p>绝对不要盲目地试图减少睡眠时间（晚上睡眠减少的话，白天打盹来补充）</p>
<p>我把自己夜间的睡眠时间缩短到4小时；然后，在中午12点左右，想办法找个合适的地点打盹30分钟；到下午18点左右，再找个地点打盹30分钟。这样，我削减了3小时的睡眠时间，同样精力充沛。（需要时间调整）</p>
</li>
<li><p>尽量不要减少与家庭成员交流的时间</p>
<p>记录和家人的一般通话时长，合适的频率，尤其是那些你并不经常联络的人。完全可以在等公共汽车或者在银行排队的时候去做。</p>
</li>
<li><p>最好不要放弃你的社交时间</p>
<p>  运用自己的资源，为值得帮助的人提供帮助。如果确实无法提供帮助，就要当机立断地告诉他。</p>
<p>  主动帮助的基本方式就是共享</p>
<p>  要想提高自己的社交质量，最好将时间和精力更多地倾注在“把自己变得更加优秀”这件事情上。</p>
</li>
</ul>
</li>
<li><p><strong>自我证明</strong></p>
<p>  “证明自己”本来没有任何错误，“证明自己给别人看”恰恰是最浪费生命的一种行为。</p>
<p>  比别人强大很多时，才会被别人认为强大</p>
</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>从早起说习惯培养-2</title>
    <url>/2016/07/24/%E4%BB%8E%E6%97%A9%E8%B5%B7%E8%AF%B4%E4%B9%A0%E6%83%AF%E5%9F%B9%E5%85%BB-2/</url>
    <content><![CDATA[<p>说起习惯，我们回想一下每天早上起床后的刷牙这件事，是不是感觉都不能称为习惯了而是必须要做的事情。早上爬起来，想都不用想，甚至还很迷糊时就机械的去做了。可是我们小时候也并不是一开始就这样的，刚开始我们也很不愿意每天刷，也是很久，甚至好几年才养成刷牙的频率越来越高。回想小时候是如何养成刷牙的习惯的：</p>
<a id="more"></a>

<ul>
<li><p>大家都是早上起来刷牙</p>
<p>  周围的环境，周边人的习惯对我们的培养习惯的影响还是很大的。大家都这样做，你也就更容易的也跟着这样做了。父母的行为很大程度上是影响孩子的行为的，孩子会不自觉的模仿父母的行为。</p>
</li>
<li><p>爸妈的督促与强迫</p>
<p>  每天起床后都会被爸妈提醒着要去刷牙，开始我们也偷懒，不想刷，即使隔了几天不刷，敦促还会在，而且会更严厉，我们因此也就更容易再次去做，而不是几次做不到后就放弃了。</p>
</li>
</ul>
<ul>
<li><p>为了不牙疼能吃更多的糖</p>
<p>  吃甜食多了，牙疼，父母教育我们刷牙能保护牙齿，不再牙疼。不牙疼就能吃更多的糖了。想想那个美味的甜，就自己去刷了。</p>
</li>
</ul>
<p>现在我们想培养的一些习惯，其实难度和刷牙对小时候的我们差不多的，甚至更容易，当然也有困难的需要更多的能力。现在感觉难了因为身边可能并没有那么多人去那样做，甚至只有你自己。没有人每天敦促你。小时候跟妈妈说吃完糖我就去刷牙，很可能就得到了甜头，而现在呢，短时间可能是看不到效果的。</p>
<p>习惯的培养是两个矛盾的自我的纠缠和抗争。你需要去慢慢培养那个更好的自己，使其更强大，有更多的主导权。参照上面的例子，我们不再是别人的逼迫，而是自己想要变得更好而去改变，那么就要仔细想想要改变什么，现在什么情况，怎么去做。确定好目标，就加强对自己的提醒，开始做就是了。当然在做的过程中，会遇到很多不同情况阻碍自己前进，比如：</p>
<ul>
<li><p>贪多，用力过猛</p>
<p>  我们总是习惯高估自己的能力，开始时给自己制定很多的任务，在开始的时候由于激情，奋力的做了几天，由于种种原因，然后就就没有然后了。认清事实真的不容易，我们或许刚开始就没有那个能力去做好这些，心平气和地接受自己最初的弱小，慢慢培养那个更好的自己。改变不是瞬间的事情，那个弱小的更好的自己需要持续投入才能逐步壮大。可以把习惯的难度降低点，坚持下去后，再逐步提高。</p>
</li>
<li><p>被自己情绪左右</p>
<p>  可能还会碰到情绪这个拦路虎，当心情不好活感觉今天不在状态，就常常会想“今天就休息一天吧，明天继续，明天一定做”。可到了明天，还会同样这样想。记住：明天会和今天一样不想做。常常被情绪左右，是你在受你大脑的控，而不是你控制你的大脑，有个概念叫 <a href="https://en.wikipedia.org/wiki/Metacognition" target="_blank" rel="noopener"><strong>元认知</strong></a>，即“认知的认知”或“知识的知识”。简言之，就是对自己的认知过程（包括：记忆、感知、计算、联想等各项）的思考。利用我们的元认知，有意识地控制大脑，而不是无意识的受大脑控制。</p>
</li>
</ul>
<p>这篇文章其实在上篇写好时就已经完成一半了，可到今天才写完整。这两天就是被情绪影响了，感觉不在状态，就拖到了现在。有时就是这样，道理你都懂，可还是做不好。内心那个更好的自己的力量还很弱，还需要时间去培养。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>习惯</tag>
      </tags>
  </entry>
  <entry>
    <title>从早起说习惯培养-1</title>
    <url>/2016/07/21/%E4%BB%8E%E6%97%A9%E8%B5%B7%E8%AF%B4%E4%B9%A0%E6%83%AF%E5%9F%B9%E5%85%BB-1/</url>
    <content><![CDATA[<p>以前总以为自己是夜型人，总是很晚才睡，睡觉很轻，也常会失眠。两个月前，打算再次尝试着早起，试着做个晨型人，早睡早起。两个月看来，这次并没感觉那么困难，早起的频率比以前高许多了。但并不是起的很早并且每天如此，基本是6点到6点半之间吧，一周也有一天两天起的比较晚的，但感觉没关系，还是可以比较容易继续下去的。今天就写一些关于早起和习惯培养的总结吧，继续激励自己做下去。</p>
<a id="more"></a>

<h2 id="关于早起"><a href="#关于早起" class="headerlink" title="关于早起"></a>关于早起</h2><p>当然我做的还不够好，这也才两个月，并且还是许多次缺席的，提升的空间还很大，还有许多好的习惯需要去培养。以前也有过尝试，还不止一次吧。一时热血，感觉有一件事挺好，开始两天还可以，那个劲头一过，也就慢慢停下来了，没有开始时的那种渴望了。自己也是挺笨的，停下来就那样迷糊着就过去了，也没静下来好好想想哪儿需要调整改进的。就说早起这事吧，我觉得几点需要注意的：</p>
<ul>
<li><p><strong>关于睡眠周期</strong></p>
<p>  人的睡眠是分周期的，一周期内会出现非REM睡眠阶段（包括入睡期、浅睡期、熟睡期、深睡期）和REM(快速动眼期)睡眠阶段的交替，一周期一般大概在90<del>120分钟吧，也因人而异。在一夜的睡眠中，人通常会经历4</del>5个REM睡眠时段，一开始的时间较短，后来逐渐增长。在REM阶段，人们的大脑比较活跃，容易醒来。因此在睡够周期整数倍时（即处在REM睡眠阶段）起床会更容易。不然在熟睡期或深睡期闹钟叫醒就会很难受。因此我们不一定非要睡够8个小时，一般6个小时或7.5个小时都是可以的，更有甚者，只要醒了就起床，不管4点、5点还是6点，当然也不会太早，有每晚只睡4个多小时的。睡眠不够的可以在白天午睡或者多次打盹来弥补，这样同样也能保证白天的精力。当然这是需要根据个人情况慢慢调整培养的。关于快速动眼期参看<a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E5%8B%95%E7%9C%BC%E6%9C%9F" target="_blank" rel="noopener"><strong><em>维基百科</em></strong></a>或<a href="http://baike.baidu.com/view/3884332.htm" target="_blank" rel="noopener"><strong><em>百度百科</em></strong></a>。（公众号中不可以放外链，不能直接打开。请点阅读原文，进我的博客，里面还有关于维基百科和谷歌的正确打开方式<a href="http://www.wonesky.com/2015/06/14/%E9%82%A3%E4%BA%9B%E7%88%AC%E8%BF%87%E7%9A%84%E6%A2%AF%E5%AD%90/" target="_blank" rel="noopener">《那些我爬过的梯子》</a>）</p>
</li>
<li><p><strong>确定早起后要做的事情</strong></p>
<p>  这个也挺重要的，不然起来没事做，还不如再睡会呢。最好是爬起来都可以做的，不需要清醒。慢慢清醒后做更重要的事情。我是起来就去跑步去了，不是很清醒的状态下慢跑两圈，然后再加快点跑个20分钟或半个小时，跑完洗漱下，开始新的一天。这样白天也比较有精神。上周开始调整为起来洗漱后开始阅读了，还可以，不觉得头脑昏沉。</p>
</li>
<li><p><strong>不断重新调整</strong></p>
<p>  开始时别要求太严格，别一次没做到就感觉计划失败了，别希望太完美（对处女座自己还是得再次提醒）。一次两次没做到，没事，调整一下，继续去做。但最好别连着超过三次，这样就更容易继续不去做了。要循序渐进的，不要那么着急看效果，明白复利效应，积累到一定程度才会有明显的效果。</p>
</li>
<li><p><strong>寻找其中的乐趣</strong></p>
<p>到后来尽量不要去想坚持了多少天，很不容易了，要休息下，然后一休息就一直休息下去了。其实并没有你感觉的那么痛苦，奖励还是要有的，重要的是要认识到这样做对自己的好处，你得去找你喜欢的地方，渐渐的让自己觉得做这件事不那么难，不是需要坚持的，是自己自主的想就去做，再后来就不用想就是去做，当然我还没达到这个阶段。</p>
</li>
</ul>
<p>很多事情是关联到一起的，发现你已经早起了，可还是没达到想要的效果。比如，起是起早了，可白天精神恍惚，一整天效率降了很多。其实这很可能是因为你本来效率都不高，你不能因为早起就想把效率提上去。刚开始的不适不但不会使效率提高还很可能使之下降。我就是这种情况，提高效率并不只是早起就行了，还有很多方面要注意并养成习惯的。比如增加身体锻炼，这样能减少白天的疲惫感，时间的预估，做事的顺序等，这些还等着去践行呢，以后再写感受。不是一次就能做的非常好的，有进步，并不断调整，再进步，让习惯更符合自己。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>习惯</tag>
      </tags>
  </entry>
  <entry>
    <title>我们需要个歌手</title>
    <url>/2016/07/18/%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%B8%AA%E6%AD%8C%E6%89%8B/</url>
    <content><![CDATA[<p>今天来说一个具有传奇色彩的人物–左小祖咒。人和名字一样的奇怪，他的名头和《权力的游戏》中龙母的称号有的一拼，小说家、诗人、歌手、当代艺术家、摇滚师、电影配乐人…而且这名号应该还会再继续增加，现在他画的画已经卖的很好了，并且开始举办自己的个人演讲，未来还可能会有导演的电影。名号不少，可对其了解的并不在多数，虽然左小祖咒在这几年已经是越来越红了。</p>
<a id="more"></a>
<p>可能听过左小一些歌的人会更奇怪了，为什么这家伙唱歌跑调，驴嘶马鸣一般，还会有人听？唱成这样，为啥还有人很喜欢，并且评价还挺高，难道是很会炒作，装X？</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=320 height=86 src="http://music.163.com/outchain/player?type=2&id=190119&auto=1&height=66"></iframe>

<h2 id="我听左小祖咒"><a href="#我听左小祖咒" class="headerlink" title="我听左小祖咒"></a>我听左小祖咒</h2><p>我是2010年知道左小祖咒的，那时对摇滚比较感兴趣，在搜国内的摇滚歌手时发现的那个奇怪的名字，就找了一些歌去听，开始听的还是早期的那几张专辑中的歌曲，那嘶嚎，真不是耳朵听的。那时听过的只是汪峰那种比较流行的，崔健的都没感觉好听，只是觉得词写的还不错，这又来个这样的，肯定接受不了，后来一看歌词，擦，发现词也看不懂，这是什么玩意儿。那时我能继续再听下去，并且后来很喜欢，很可能是由于认知闭合需求，你越是不了解的东西，越好奇，想更多的去了解。接下来都是偶尔听一下，有次在《走失的主人》这首歌里看到“<em>有一只狗用忧郁的眼光 在寻找他走失的主人</em>”这句的时候，感觉写出这样的词肯定不是简单的人。后来发现编曲也很好听，歌词也有种说不出的“好”的感觉，也许是所谓的诗意吧，还是接受不了那种唱法。让我彻底陷入喜欢的是有次夜晚独自听的《北京画报》，像个流浪者，在街头弹唱着那些经历的苦难和荒诞，那时从苦难里爬出来的但不悲伤的声音，就那样吟唱着，14分钟里看到生活底层的万象，真实且荒唐。</p>
<p>虽然没学过什么乐器，也不识谱，也不会唱，但还是感觉音乐是个奇妙的东西。特定时间自己一个人带耳机听，觉得很好听。想向别人介绍，当拔掉耳机外放时感觉味道全变了，每个人对相同的音乐感觉是很难传递的。不同的人不同时期对相同的音乐感受都是不同的。我就谈谈我自己对左小祖咒音乐的感受，以及对他的理解。</p>
<h2 id="左小祖咒的经历"><a href="#左小祖咒的经历" class="headerlink" title="左小祖咒的经历"></a>左小祖咒的经历</h2><p>左小祖咒的大致经历，可以在<a href="https://zh.wikipedia.org/wiki/%E5%B7%A6%E5%B0%8F%E7%A5%96%E5%92%92" target="_blank" rel="noopener">维基百科</a>或<a href="http://baike.baidu.com/view/85078.htm" target="_blank" rel="noopener">百度百科</a>里看到，这里大致总结一下：</p>
<p>原名吴红巾，1970年生于江苏，中学辍学，15岁离家，在部队里做过医生（好像是在某个空军场站医院的卫生所做男护士，主要工作是割包皮）。1990年到上海以卖<a href="http://baike.baidu.com/view/391676.htm" target="_blank" rel="noopener">打口带</a>，93年到北京，在东部郊区和几个画家行为艺术家缔造了对中国当代艺术影响深远的前卫艺术家部落“北京东村”（《为无名山增高一米》就是那时东村的那些人搞出来的后来在中国当代艺术界很有名的作品），并组建NO乐队，改名为左小祖咒，任乐队主唱、吉他手、提琴手和词曲作者。曾被怀疑是东方化工厂爆炸案的嫌疑犯被无故关押二十多天（小说《狂犬吠墓》就是这次事件相关的作品）。从1999年到2001年除了三张个人专辑《走失的主人》、《庙会之旅》、《左小祖咒在地安门》，奠定了左小祖咒的基础，对前面专辑制作的不满，经历四年不跟唱片公司合作，自己制作了《我不能悲伤的坐在你身旁》，定下当时的很高的价格150元。06年电影配乐《美国》、08年《你知道东方在哪一边》双碟唱片定价500,09年《大事》，以后每年都至少有一张专辑。2011年因艾未未相关事件禁演三年。不止音乐，还参加过很多艺术作品展览，专辑的封面都是其他艺术家或他自己的艺术作品（《你知道东方在哪一边》的封面《我也爱当代艺术》）。</p>
<h2 id="如何正确的欣赏左小祖咒？"><a href="#如何正确的欣赏左小祖咒？" class="headerlink" title="如何正确的欣赏左小祖咒？"></a>如何正确的欣赏左小祖咒？</h2><p>前几年和菜头在《如何正确的欣赏左小祖咒和鸟叔》中说“</p>
<blockquote>
<p>一个人折腾了19年，如果你把他这19年的折腾史过一遍，无论理解赞同欣赏与否，你会承认一点：这个人要比看起来复杂得多，不仅仅是唱歌跑调那么简单。把他视为一个哗众取宠的跑调歌手，起码是认识太片面，不够尊重这19年的时光。</p>
</blockquote>
<blockquote>
<p>面对左小祖咒这样一种人，你不可以用以往的经验试图把他归类，或者纳入某种模式。</p>
</blockquote>
<p>东村时，一群吃不饱，因搞当代艺术被周围村民认为是疯子甚至被警察扫黄打非给抓的一群人，在创建东村时就有这有么一条类似纲领性的东西“写歌有旋律是可耻的”。在《忧伤的老板》书中，有这样的描绘：</p>
<blockquote>
<p>我当时住在这个院子的一间厢房里，天天练胡喊，把整座院子弄得震天响。怎么喊才能让别人听着感觉惨不忍睹，自己又不太费劲，才是我要练的秘笈。</p>
</blockquote>
<p>左小从一开始就在打造自己的特色品牌，从名字到唱歌的方法，到做的作品，都在创造一些自己独特的东西。左小在回答“为什么我的音乐难听，但那么多人会喜欢？”说“就是质地（制作的质量）这个东西”，唱片价格高是因为有那个质量在那保证。</p>
<p>左小的音乐里有很多现实的东西，很多关于底层生活的苦难和抗争，不是那种英雄式的也不是悲惨的，而是一种黑色幽默。《苦鬼》中“你叼著烟地投降 跺着脚地想着窍门儿”是多么的形象，再加上左小的演唱方式，真的很贴切。<strong><em>摇滚必须要跟当代生活发生关系才是摇滚</em></strong>。</p>
<p>左小曾提过一个好的作品本身具有自毁性。很棒的艺术充满了智慧，充满了邪恶和美丽，那种邪恶的外表下包装的善良和美丽才会构成好的作品。就像不着调的嘶吼吟唱里，藏着美妙的编曲和诗意的歌词，才被左小认为是好的作品吧。</p>
<blockquote>
<p>我的世界里从不去宣扬他人的理论，我只为自己的狗屁信仰而像个男泼妇一样喋喋不休，不依不饶，我想这是我一直的工作，为自己的价值活着。（2010万事如意LIVE 前言）</p>
</blockquote>
<h2 id="歌曲推荐"><a href="#歌曲推荐" class="headerlink" title="歌曲推荐"></a>歌曲推荐</h2><ul>
<li>忧伤的老板、爱情的枪、乌兰巴托的夜、小莉（比较温和的）</li>
<li>走失的主人、正宗、阿丝玛                         –来自专辑《走失的主人》</li>
<li>苦鬼、皮条客                                    –来自专辑《庙会之旅》</li>
<li>爱的劳工、代表、黄泉大道                         –来自专辑《左小祖咒在地安门》</li>
<li>像孩子一样的倾听、我不能悲伤的坐在你身旁、恩惠     –来自专辑《我不能悲伤的坐在你身旁》</li>
<li>方法论、野合万事兴                              –来自专辑《你知道东方在哪一边》</li>
<li>北京画报                                       –来自专辑《大事》</li>
</ul>
<h2 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h2><ul>
<li><a href="http://ent.ifeng.com/fcd/special/zuoxiaozuzhou/" target="_blank" rel="noopener">凤凰网-非常道对左小祖咒的采访</a></li>
<li><a href="http://news.99ys.com/news/2015/0615/9_193749_1.shtml" target="_blank" rel="noopener">那时我们都疯狂(6) –《为无名山增高一米》20年访谈</a></li>
<li>《狂犬吠墓》</li>
<li>《忧伤的老板》</li>
<li>郝舫、颜峻、孙孟晋、张晓舟等的乐评</li>
<li>左小祖咒公众号：zuoxiao_zuzhou</li>
</ul>
<p>本文题目来自左小祖咒2014年的专辑名称。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>还能写下去吗</title>
    <url>/2016/07/09/%E8%BF%98%E8%83%BD%E5%86%99%E4%B8%8B%E5%8E%BB%E5%90%97/</url>
    <content><![CDATA[<p>打开自己的博客网站，看到发表的最后一篇文章距今已快三个月了。回头看看，去年5月份想把博客写下去，重新搭建了博客平台写下了开篇<a href="http://www.wonesky.com/2015/05/21/%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/" target="_blank" rel="noopener">“再次启程”</a>，在接下来的一个月又写了2篇，就再没有了音信，直到今年3月和4月又脑袋发热写了2篇工具使用总结文章。那还是个位数的文章总篇数，真是不堪入目。把这事忘了吗？其实那个想写的念头还未完全熄灭；那为啥就没有更新了？我也在问自己，咋就不能坚持写下去呢？</p>
<a id="more"></a>
<p>前段时间看到李笑来在<a href="http://mp.weixin.qq.com/s?__biz=MzAxNzI4MTMwMw==&mid=2651629988&idx=1&sn=a870423711e0a2a5018b6bdb1125f64b&scene=4#wechat_redirect" target="_blank" rel="noopener">新生大学写作课的宣讲部分</a>讲的内容，再次被刺激到了。在笑来老师的影响下，有那么一群以学习为乐的人，在不断升级自己的操作系统，通过践行，不断积累，改变自我。和他们相比，我的行动力还是太弱了。</p>
<h3 id="写，写，写"><a href="#写，写，写" class="headerlink" title="写，写，写"></a>写，写，写</h3><p>在知乎上看到一个问题<a href="https://www.zhihu.com/question/30161095" target="_blank" rel="noopener">“为什么「道理都懂，然而执行力差」的现象如此普遍？”</a>，徐佳鑫的回答挺令我震撼的。<br>“明白道理”的一瞬只不过是大脑的<em>短期记忆</em>，其影响时间是很短暂的，除非那瞬间感情非常强烈，被影响时间会增长。就如“一朝被蛇咬，十年怕井绳”的情形。 如果想让这个道理对你生活产生实质性的改变，也就是执行力变强大，就要把这个认知变成你的<em>长期记忆</em>。强烈的感情刺激是一种不那么容易产生的方式，另一种增强长期记忆的重要方式是<strong>重复</strong>（具有反馈和不断改进的重复）。健脑如健身，这种执行需要像锻炼肌肉那样，重复的锻炼使你大脑更容易做出有利行动的选择。xx天养成一个习惯还是有道理的，开始时的固定重复锻炼会更容易使之成为一种下意识的选择。</p>
<p>因此 <strong>写！写！写！</strong> 才是更重要的，先不管其他那么多，就是写，无论好坏，不管别人怎么看，就需要这么任性。先不管内容质量的高低，先把写当作一个习惯去培养。</p>
<h3 id="锻炼“写”的肌肉"><a href="#锻炼“写”的肌肉" class="headerlink" title="锻炼“写”的肌肉"></a>锻炼“写”的肌肉</h3><p>那又怎么样锻炼”写，写，写”这种执行肌肉呢？</p>
<p>笑来提到了“另一种世界”，在那里，没有“勤奋”，没有“努力”，没有“坚持”，没有“毅力”，反正就是没有这类的东西。有的是什么？“干脆停不下来”的快感。</p>
<blockquote>
<p>当我意识到写作是思考的一种方法，甚至是启动思考、加速思考、提高思考质量的方法之后，我就干脆停不下来了 —— 因为思考对我来说太重要了，不会思考，不能思考，不能正确地思考，不能高效地思考，对我来说简直生不如死，不是吗？</p>
</blockquote>
<p>羡慕吧，我也很羡慕。另一个世界好进入吗？不尝试下怎么知道。幸运的是笑来老师提出了”另一世界”的入口：</p>
<blockquote>
<p>你得想办法找到你自己<strong>真正喜欢</strong>的，且真的能给你带来<strong>巨大收益</strong>的事情。方法有一个，就是<strong>不断转换角度</strong>去看，不断转换角度去探究，找到一个自己真正喜欢的点，一个点就够，但必须极度喜欢。</p>
</blockquote>
<p>看到许多牛人说写作的好处，是不是真的这样，自己试了才知道。能不能找到喜欢的点，还需在锻炼中不断转换角度去思考。</p>
<p>平时刷微博或者微信公众号，获得的基本都是碎片化的信息，很少记录下来并系统的整理，看过，知道这回事，偶尔也有点想法，因为没有记录也稍纵即逝。现在发现做笔记，并进行个人知识管理真的很重要，以前也在印象笔记上收集了一些，但是没有经过整理消化把信息变成知识，更别提消化后把这些进行输出。输入量不够，积累又不多，输出就更不容易了。已经很长时间没有完整的读成本的了，有必要增加自己的阅读量了，记住一定要记笔记。</p>
<h3 id="补充–7-15"><a href="#补充–7-15" class="headerlink" title="补充–7.15"></a>补充–7.15</h3><p>以前好奇，胡乱的把公众号给开了，但一篇都没写过。以后会同步在公众号内更新，欢迎关注！</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法简记</title>
    <url>/2016/04/14/Markdown%E8%AF%AD%E6%B3%95%E7%AE%80%E8%AE%B0/</url>
    <content><![CDATA[<p>Markdown 是一种轻量级 <strong>标记语言</strong>，它允许我们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这是维基百科的解释<a href="https://zh.wikipedia.org/zh-cn/Markdown" target="_blank" rel="noopener">Markdown</a>。它不像字处理软件Word有大量的排版设置，在Markdown中通过简单的语法来设置输出样式。</p>
<a id="more"></a>

<h3 id="Markdown-优点"><a href="#Markdown-优点" class="headerlink" title="Markdown 优点"></a>Markdown 优点</h3><p>Markdown是纯文本格式，在任何平台都可以使用常用的编辑器去写。一些只用过windows的童鞋认识不到纯文本的好处，觉得Word不是很好吗，他们不知道很多Mac和Linux平台的用户是没装Word的，况且纯文本文件基本可以使用任何一个编辑器就可以打开，不用再打开类似Word的庞大的软件。Markdown另一个有点就是你只需写，用键盘把文字内容啪啪啪地打出来后就已经排版好了，最好从头到尾都不要使用鼠标。适合那些经常写代码、博客文章等的人，github上的说明文档都是使用Markdown来写，许多博客平台也支持Markdown格式写作。</p>
<p>下面简单记录下Markdown的语法，以备查询。<br>首先记住两点：</p>
<ul>
<li><strong>标记符号与后面文字中间要有空格</strong></li>
<li><strong>如果想输出标记符使用反斜杠来转义符 “&quot;</strong></li>
</ul>
<h3 id="段落："><a href="#段落：" class="headerlink" title="段落："></a><strong>段落</strong>：</h3><p>段落间以一个或以上的空行来分</p>
<h3 id="换行："><a href="#换行：" class="headerlink" title="换行："></a><strong>换行</strong>：</h3><p>两个以上空格再加回车</p>
<h3 id="标题："><a href="#标题：" class="headerlink" title="标题："></a><strong>标题</strong>：</h3><p>用#来标识标题，在行首插入1到6个#，对应到标题1到6阶。比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题  </span><br><span class="line">## 二级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<p>显示效果就是</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><ul>
<li>无序列表：使用*、+或是-作为列表标记。列表分级前面加tab或4个空格。比如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 红色</span><br><span class="line">- 蓝色</span><br><span class="line">* 绿色</span><br><span class="line">	- 深绿</span><br><span class="line">	- 浅绿</span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<blockquote>
<ul>
<li>红色</li>
</ul>
<ul>
<li>蓝色</li>
</ul>
<ul>
<li>绿色<ul>
<li>深绿</li>
<li>浅绿</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>有序列表： 使用数字接着一个英文句点 你在列表标记上使用的数字并不会影响显示输出的结果。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 首先</span><br><span class="line">2. 其次，第一段：巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉</span><br><span class="line"></span><br><span class="line">   第二段：巴拉巴拉巴拉巴拉</span><br><span class="line">5. 最后</span><br><span class="line">    3.第一</span><br><span class="line">    1.第二</span><br></pre></td></tr></table></figure>
<p>输出显示</p>
<blockquote>
<ol>
<li>首先</li>
<li>其次，第一段：巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉</li>
</ol>
</blockquote>
<pre><code>第二段：巴拉巴拉巴拉巴拉</code></pre><blockquote>
<ol start="5">
<li>最后<ol start="3">
<li>第一</li>
<li>第二</li>
</ol>
</li>
</ol>
</blockquote>
<p>当然最好还是按照字母顺序，这样感觉比较顺。如果你想输出数字加点可以使用转义符反斜杠<code>1\.</code> 则输出 1.。若果列表中有多个段落则要空行后 段落开头加一个Tab或4个空格。</p>
<h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h3><p>使用 &gt; 表示文字引用。区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; 就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 野火烧不尽</span><br><span class="line">&gt;&gt; 春风吹又生</span><br></pre></td></tr></table></figure>
<p>显示为</p>
<blockquote>
<p>野火烧不尽</p>
<blockquote>
<p>春风吹又生</p>
</blockquote>
</blockquote>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进。如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符</p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a><strong>代码区块</strong></h3><ul>
<li>代码快：对程序猿来说，如果想贴代码，则不希望它以一般段落文件的方式去排版，而是照原来代码的样子显示。在Markdown中只要简单地缩进 4 个空格或是 1 个制表符就可以。一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tell application &quot;Foo&quot;</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<pre><code>tell application &quot;Foo&quot;
    beep
end tell</code></pre><ul>
<li><p>行内代码快：如果要标记一小段行内代码，你可以用反引号把它包起来（`）。比如：使用`printf()`,显示为<code>printf()</code>。</p>
</li>
<li><p>加强代码快：对于特定编程语言，希望其语法高亮的显示，行号显示时可以在首尾分别使用三个反引号（`）把代码包起来。</p>
</li>
</ul>
<pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line"><span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></code></pre><p>显示效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line"><span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>

<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a><strong>链接和图片</strong></h3><p>使用 [描述](链接地址) 为文字增加外链接。使用 ![描述](图片链接地址) 插入图像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[我的博客](http://www.wonesky.com)</span><br><span class="line">![Markdown图片测试](http://wonesky.qiniudn.com/Markdown-img-test.png)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.wonesky.com" target="_blank" rel="noopener">我的博客</a></p>
<p><img src="http://wonesky.qiniudn.com/Markdown-img-test.png-myimg" alt="Markdown图片测试"></p>
<h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a><strong>斜体和粗体</strong></h3><p>使用 *或_ 标识斜体。使用两个*或_ 标识粗体。</p>
<pre><code>斜体   *斜体*    
粗体  __粗体__</code></pre><p>效果如下</p>
<blockquote>
<p><em>斜体</em></p>
</blockquote>
<blockquote>
<p><strong>粗体</strong></p>
</blockquote>
<p>如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><strong>删除线</strong></h3><p>使用 ~~ 表示删除线。</p>
<pre><code>~~这是一段错误的文本。~~</code></pre><p>效果：</p>
<blockquote>
<p><del>这是一段错误的文本。</del></p>
</blockquote>
<h3 id="表格支持"><a href="#表格支持" class="headerlink" title="表格支持"></a><strong>表格支持</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | $1600 |   5     |</span><br><span class="line">| 手机        |   $12   |   12   |</span><br><span class="line">| 管线        |    $1    |  234  |</span><br></pre></td></tr></table></figure>
<p>显示效果如下:</p>
<table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>还有一些比较高级的用法，比如流程图和序列图的绘制，LaTeX 公式的支持（访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> ，使用方法参考，<a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="noopener">公式指导手册</a>。还有待办事宜 Todo 列表，使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表。</p>
<h3 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h3><p>支持Markdown的编辑器太多，功能也不完全一致，有的是用来进行基本的写作，有的是用来写代码的，有的甚至只是博客平台配套的编辑器。月光博客有篇文章对Markdown编辑器总结的不错，请参考<a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">好用的Markdown编辑器一览</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></li>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">月光博客——好用的Markdown编辑器一览</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用总结</title>
    <url>/2016/03/22/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>本文是对自己学习使用Git来做版本控制的过程的一个小结，也是为了方便以后的速查参考。</p>
<a id="more"></a>
<h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><p>什么是“版本控制”呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。试想当你的文稿、论文、设计图、程序源码等，需要多次修改，有时候发现改过的新版本还不如原来的，想退回原版本，这时候如果你没有保留原来的备份就有点悲剧了。或者多人合作共同完成一个项目时，为了保证文件的一致性，需要对每人对文件的修改做些记录。这是你就需要一个版本控制的东西。回顾以前区分文件之间不同，主要靠对文件的重命名和日期，对之间的不同也是同时打开文件进行比对，这种方法是比较简单，当文件按复杂时，特别像程序源码，文件比较多，修改也比较频繁，再用这种方法就比较容易出错。</p>
<h2 id="版本控制的种类"><a href="#版本控制的种类" class="headerlink" title="版本控制的种类"></a>版本控制的种类</h2><p>版本控制工具主要分两种，集中式和分布式版本控制，是两种不同的管理思想，就类似民主和集权，各有各优劣。集中式版本控制工具有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。这种做法管理起来相对容易，集中管理的一个通病是单点故障，如果集中服务器出故障，协同工作将停滞，版本历史可能损毁，只能从各个客户端拼凑。对于分布式版本控制工具，在这类系统中，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p>
<h2 id="分布式版本控制工具–Git"><a href="#分布式版本控制工具–Git" class="headerlink" title="分布式版本控制工具–Git"></a>分布式版本控制工具–Git</h2><p>Git是一款免费、开源的分布式版本控制系统，是LinusTorvalds为更好地管理Linux内核开发而设计。git一词源自英国俚语，意思大约是“混账”，LinusTorvalds自嘲道:</p>
<blockquote>
<p>I’m an egotistical bastard, and I name all my projects after myself. First Linux, now git.</p>
</blockquote>
<p>更多参考<a href="https://zh.wikipedia.org/zh/Git" target="_blank" rel="noopener">Git维基</a>。什么，还被qiang打不开？参考<a href="http://www.wonesky.com/2015/06/14/%E9%82%A3%E4%BA%9B%E7%88%AC%E8%BF%87%E7%9A%84%E6%A2%AF%E5%AD%90/" target="_blank" rel="noopener">fq秘笈</a>。多用Google和Wiki吧。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>从<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>下载适合你系统的git版本，linux一般系统自带。git分命令行和GUI版本，因为传承自linux，命令行是必学的，更方便和强大。windows下，按默认设置安装即可，安装后开始菜单或右键中找到git bash打开即可。详见<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">安装说明</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装好后，使用git的第一步是对其进行配置你的用户名和邮箱，当提交时会用到这些信息。命令 git config 是配置命令，–global参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然git有三种级别的配置，系统级、用户级和仓库级，可以更改位于不同位置的配置文件对它们进行配置。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;aaa&quot;    </span><br><span class="line">$ git config --global user.email aaa@bb.com</span><br><span class="line">$ git config --global core.quotepath false  //中文文件名输出显示乱码问题</span><br></pre></td></tr></table></figure>
<p>如果想查看本机的配置，可以使用下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>
<h3 id="使用git"><a href="#使用git" class="headerlink" title="使用git"></a>使用git</h3><p>使用git时遇到不熟悉的命令时，记住使用git help command来获取帮助，常查帮助手册是很好的一个习惯。</p>
<h4 id="初始化版本库"><a href="#初始化版本库" class="headerlink" title="初始化版本库"></a>初始化版本库</h4><p>有两种方式来创建版本仓库(repository):本地创建并添加文件和从远程仓库克隆。<br>本地创建，在选好的目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git init</span><br></pre></td></tr></table></figure>
<p>这条命令会创建一个空的版本库(repository),在当前文件夹下会创建一个名为.git的隐藏文件夹，这个子目录含有你初始化的Git仓库中所有的必须文件，不要随便去修改里面的内容。这个空仓库会默认创建一个名为master的分支，并在此分支上。现在当前目录(除去.git目录)就是你的工作区和没被跟踪的文件，.git目录里是你的版本库。(见git版本库认识图中关系)</p>
<p>另一种创建版本库的方式是从已经存在了的 Git 仓库获取一个拷贝，可以使用 git clone [url] local_repository_name。当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git clone https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure>
<p>这会在当前目录下创建一个名为 “mylibgit” 的目录，并在这个目录下初始化一个 .git文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。Git支持多种数据传输协议。上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git</p>
<h4 id="git版本库的认识"><a href="#git版本库的认识" class="headerlink" title="git版本库的认识"></a>git版本库的认识</h4><p>Git保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。<br>版本库中有个重要的概念需要明白，就是暂存区（stage或者称为index）。你的本地仓库由 git 维护的三棵“树”组成。第一个是你的“工作目录”，它持有实际文件；第二个是“暂存区（Index）”，它像个缓存区域，临时保存你的改动；最后是“HEAD”，它指向你最后一次提交的结果。你所修改的文件必须先保存到暂存区，才能提交到当前分支上,，是不可以直接提交的。你也可以把暂存区的内容恢复到工作区来撤销工作区的修改，下面是工作区、版本库和暂存区的关系图，图中的命令后面会解释：<br><img src="http://wonesky.qiniudn.com/git-stage.png-myimg" style="display:block;margin:auto"/></p>
<p>还有一个重要的是文件的状态。文件状态可以使用git status命令查看，工作目录下的文件共有四种状态：未追踪(untract)、已提交（committed）/未修改(unmodified)，已修改（modified）和已暂存（staged）。它们之间的状态转换如下图所示：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/Gitfilelifecycle.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/Gitfilelifecycle.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><p>现在我们在此目录下创建文件hello.txt，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p>命令查看文件状态，现在我们没有跟踪任何文件，所有的修改都不会被记录。首先我们使用git add 命令来跟踪文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add hello.txt</span><br></pre></td></tr></table></figure>
<p>现在hello.txt文件已被跟踪，如果不想跟踪某文件可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached filename</span><br></pre></td></tr></table></figure>
<p>打开hello.txt往里面写几行内容，现在用git status查看文件状态会发现文件状态为修改状态。再使用git add命令把修改保存到暂存区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add hello.txt</span><br></pre></td></tr></table></figure>
<p>现在你又在hello.txt中添加一行文字，文件状态又变为修在状态，如果你想放弃对工作区的修改，可以使用git checkout命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout --hello.txt</span><br></pre></td></tr></table></figure>
<p>此命令是用暂存区的内容来替换工作区的内容，达到撤销修改的目的。修改好后就可以提交到当前分支了，使用git commit命令,-m后面输入的是本次提交的说明，最好是有意义的,方便以后查阅。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot; add new file hello.txt&quot;</span><br></pre></td></tr></table></figure>
<p>好，到现在为止，我们完成了一次提交。下面我们来看下删除文件和移动文件(重命名文件)，git是如何跟踪的。我们再新建个test.txt文件，用git add来跟踪它，增添一行文字，暂存，提交。当我们不需要test.txt时，如果直接执行本地删除，再用git status查看文件状态，发现暂存区并未跟着删除，这样提交的话版本库当前分支也不会跟着删除。要保证暂存区删除，提交后HEAD跟着删除，有两种方法，一种是使用命令git rm，熟悉Linux的都知道rm是Linux下删除文件的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br></pre></td></tr></table></figure>
<p>这样暂存区和工作区都会把test.txt文件删除。还有一种就是你本地删除后，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add -u</span><br></pre></td></tr></table></figure>
<p>或者是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br></pre></td></tr></table></figure>
<p>-u是可以将（被版本库追踪的）本地文件的变更（修改、删除）全部记录到暂存区中。-A会对工作区中所有改动以及新增文件添加到暂存区。<br>如果你想查看暂存区的文件，可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git ls-files</span><br></pre></td></tr></table></figure>
<p>查看历史版本中的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git ls-files --with-tree=HEAD^</span><br></pre></td></tr></table></figure>
<p>如果想恢复删除，只是在最新的提交中删除了文件，历史提交中文件仍然保留，可以从历史提交中提取文件。执行下面的命令可以从历史（前一次提交）中恢复test.txt文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git cat-file -p HEAD~1:test.txt &gt; test.txt</span><br></pre></td></tr></table></figure>
<p>对文件进行重命名也有类似的两种操作，一种是git mv命令，如果把test.txt改名为README，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git mv test.txt README</span><br></pre></td></tr></table></figure>
<p>也可以本地直接重命名，然后使用git add -A命令。</p>
<p>我们可以常用git status查看文件状态，当我们想要查看工作区，暂存区和HEAD所指分支之间的不同时，我们可以使用git diff命令。</p>
<h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>通过使用不同参数调用git diff命令，可以对工作区、暂存区、HEAD中的内容两两比较。下图是git diff命令不同区域的比较：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-diff.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-diff.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<ul>
<li>工作区和暂存区比较。<br>默认情况下比较的是工作区和暂存区之间的不同<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git diff</span><br></pre></td></tr></table></figure></li>
<li>暂存区和HEAD比较。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure></li>
<li>工作区和HEAD比较。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure>
如果想比较特定的文件，在后面加上文件名</li>
</ul>
<h4 id="git-log-和-git-reflog"><a href="#git-log-和-git-reflog" class="headerlink" title="git log 和 git reflog"></a>git log 和 git reflog</h4><p>当我们有多次提交后，想查看提交的历史，可以使用git log命令，log命令记录了所有提交的历史。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit eb970fdb27a851b05e4ffd89a6b012ec4be925dc</span><br><span class="line">Author: wonesky &lt;wonesky@gmail.com&gt;</span><br><span class="line">Date: wed Apr 13 21:32:35 2016 +0800</span><br><span class="line">    add a new file hello.md</span><br></pre></td></tr></table></figure>
<p>git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p>
<p>git relog 是查看所有的操作记录。常使用reflog挽救错误的重置。</p>
<h4 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h4><p>我们再git log中看到commit对象的SHA-1校验和，40位的一个“魔幻数字”，这究竟代表什么，下图是Git对象库中各个对象之间的关系：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-repos-detail.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-repos-detail.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<p>从中看出分支master指向的是一个提交ID（最新提交），每个commit对象中包含对象哈希ID，目录树ID，上次提交ID和作者。这样就能把每次提交串起来。</p>
<h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>当多次提交后，发现想回到以前提交的版本，git reset命令改变分支引用文件内容，即实现分支的重置。<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-reset.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-reset.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a><br>git reset [–soft | –mixed | –hard | –merge | –keep] &lt; commit &gt;</p>
<ul>
<li><p>使用参数–hard，如：git reset –hard  commit_ID</p>
<p>会执行上图中的1、2、3全部的三个动作。即：</p>
<ol>
<li>替换引用的指向。引用指向新的提交ID。</li>
<li>替换暂存区。替换后，暂存区的内容和引用指向的目录树一致。</li>
<li>替换工作区。替换后，工作区的内容变得和暂存区一致，也和HEAD所指向的目录树内容相同。<br>例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
彻底撤销最近的提交。引用回退到前一次，而且工作区和暂存区都会回退到上一次提交的状态。自上一次以来的提交全部丢失。HEAD^n表示最近提交的前n次，HEAD^可替换为提交历史任一次提交的ID，40位可以只写前几位，能够和其它区分即可。</li>
</ol>
</li>
<li><p>使用参数–soft，如:git reset –soft &lt; commit &gt;。</p>
<p>会执行上图中的操作1。即只更改引用的指向，不改变暂存区和工作区<br>。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --soft HEAD^</span><br></pre></td></tr></table></figure>
<p>工作区和暂存区不改变，但是引用向前回退一次。当对最新提交的提交说明或者提交的更改不满意时，撤销最新的提交以便重新提交。</p>
</li>
<li><p>使用参数–mixed或者不使用参数（缺省即为–mixed），如:git reset &lt; commit &gt;。</p>
<p>会执行上图中的操作1和操作2。即更改引用的指向以及重置暂存区，但是不改变工作区。<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  git reset</span><br><span class="line">$  git reset HEAD</span><br></pre></td></tr></table></figure>
<p>仅用HEAD指向的目录树重置暂存区，工作区不会受到影响，相当于将之前用git add命令更新到暂存区的内容撤出暂存区。引用也未改变，因为引用重置到HEAD相当于没有重置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset -- filename</span><br></pre></td></tr></table></figure>
<p>仅将文件filename撤出暂存区，暂存区中其他文件不改变。相当于对命令git add filename的反向操作。是把暂存区重置为HEAD所指内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD^</span><br></pre></td></tr></table></figure>
<p>工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。</p>
</li>
</ul>
<p>使用重置命令是有危险的，会彻底的丢弃历史。那么还能够通过浏览提交历史的办法找到丢弃的提交ID，再使用重置命令恢复历史么？不可能！因为重置让提交历史也改变了。可以使用git reflog查看分支HEAD的改变记录，再恢复错误的重置。</p>
<h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>git reset是对版本的撤销更改，可以回退到以前的版本。如果对文件的修改想撤销该怎么办，比如我在工作区修改了某个文件，或修改的文件已存到暂存区，此时工作区，暂存区和HEAD内容都不同了，工作区是最后修改的，其次是暂存区，如果发现修改的错了想撤销工作区或暂存区的修改可以使用git checkout命令，下图是此命令的详细情况，checkout命令还有个是改变分支的作用，后面会说。<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-checkout.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-checkout.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<ul>
<li><p>命令：git checkout branch</p>
<p>检出branch分支。要完成如图的三个步骤，更新HEAD以指向branch分支，以branch指向的树更新暂存区和工作区。</p>
</li>
<li><p>命令：git checkout</p>
<p>汇总显示工作区、暂存区与HEAD的差异。</p>
</li>
<li><p>命令：git checkout HEAD</p>
<p>同上。</p>
</li>
<li><p>命令：git checkout – filename</p>
<p>用暂存区中filename文件来覆盖工作区中的filename文件。相当于取消自上次执行git add filename以来（如果执行过）本地的修改。</p>
<p>这个命令很危险，因为对于本地的修改会悄无声息的覆盖，毫不留情。</p>
</li>
<li><p>命令：git checkout branch – filename</p>
<p>维持HEAD的指向不变。将branch所指向的提交中的filename替换暂存区和工作区中相应的文件。注意会将暂存区和工作区中的filename文件直接覆盖。</p>
</li>
<li><p>命令：git checkout – . 或写做 git checkout .</p>
<p>注意：git checkout命令后的参数为一个点（“.”）。这条命令最危险！会取消所有本地的修改（相对于暂存区）。相当于将暂存区的所有文件直接覆盖本地文件，不给用户任何确认的机会！</p>
</li>
</ul>
<h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>命令git stash可以用于保存和恢复工作进度</p>
<ul>
<li><p>命令：git stash</p>
<p>保存当前工作进度。会分别对暂存区和工作区的状态进行保存。</p>
</li>
<li><p>命令：git stash list</p>
<p>显示进度列表。此命令显然暗示了git stash可以多次保存工作进度，并且在恢复的时候进行选择。</p>
</li>
<li><p>命令：git stash pop [–index] [&lt; stash &gt;]</p>
<p>如果不使用任何参数，会恢复最新保存的工作进度，并将恢复的工作进度从存储的工作进度列表中清除。</p>
<p>如果提供&lt; stash &gt;参数（来自于git stash list显示的列表），则从该 &lt; stash &gt;中恢复。恢复完毕也将从进度列表中删除&lt; stash &gt;。</p>
<p>选项–index除了恢复工作区的文件外，还尝试恢复暂存区。这也就是为什么在本章一开始恢复进度的时候显示的状态和保存进度前略有不同。</p>
</li>
</ul>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>Git 可以给历史中的某一个提交打上标签，以示重要。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。然而，附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。使用命令git tag 查看已有的标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>
<p>打轻量级标签的命令格式为git tag  &lt; tagname &gt; [&lt; commit &gt;],创建标签需要输入标签的名字<tagname>和一个可选的提交ID<commit>。如果没有提供提交ID，则基于头指针HEAD创建标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag v1.0</span><br><span class="line">$ git tag v0.9 eb970fdb</span><br></pre></td></tr></table></figure>
<p>创建附注标签使用-a参数，-m选项指定了一条将会存储在标签中的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a v1.1 -m &apos;my version 1.1&apos;</span><br></pre></td></tr></table></figure>
<p>通过使用 git show &lt; tagname &gt; 命令可以看到标签信息与对应的提交信息。还有个选项-s是创建带GPG签名的标签。</p>
<p>删除标签通过选项-d 来实现,如下所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -d v1.1</span><br></pre></td></tr></table></figure>
<p>创建的标签都只存储在本地，默认情况下，git push 命令并不会传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上。这个过程就像共享远程分支一样 - 你可以运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin [tagname]</span><br></pre></td></tr></table></figure>
<p>如果想要一次性推送很多标签，也可以使用带有 –tags 选项的 git push 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。如果想删除远程标签，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin :refs/tags/&lt; tagname &gt;</span><br></pre></td></tr></table></figure>

<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>我们理解了git对象中每次提交的数据存储后就容易理解分支的概念，Git 的分支，其实本质上仅仅是指向提交对象的可变指针。在Git中分支管理使用命令git branch。该命令的主要用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法1： git branch</span><br><span class="line">用法2： git branch &lt;branchname&gt;</span><br><span class="line">用法3： git branch &lt;branchname&gt; &lt;start-point&gt;</span><br><span class="line">用法4： git branch -d &lt;branchname&gt;</span><br><span class="line">用法5： git branch -D &lt;branchname&gt;</span><br><span class="line">用法6： git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;</span><br><span class="line">用法7： git branch -M &lt;oldbranch&gt; &lt;newbranch&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>用法1用于显示本地分支列表。<br>当前分支在输出中会显示为特别的颜色，并用星号 “*” 标识出来。</li>
<li>用法2和用法3用于创建分支。<br>用法2基于当前头指针（HEAD）指向的提交创建分支，新分支的分支名为&lt; branchname&gt;。<br>用法3基于提交&lt; start-point&gt;创建新分支，新分支的分支名为&lt; branchname&gt;。</li>
<li>用法4和用法5用于删除分支。<br>用法4在删除分支&lt; branchname&gt;时会检查所要删除的分支是否已经合并到其他分支中，否则拒绝删除。<br>用法5会强制删除分支&lt; branchname&gt;，即使该分支没有合并到任何一个分支中。</li>
<li>用法6和用法7用于重命名分支。<br>如果版本库中已经存在名为&lt; newbranch&gt;的分支，用法6拒绝执行重命名，而用法7会强制执行。</li>
</ul>
<p>我们使用git checkout &lt; branchname &gt;来切换分支，-b选项是新建分支并切换到该分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure>
<p>如果想要两个分支合并，使用git merge命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge [选项...] &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<p>合并操作的大多数情况，只须提供一个&lt; commit&gt;（提交ID或对应的引用：分支、标签等）作为参数。合并操作将&lt; commit&gt;对应的目录树和当前工作分支的目录树的内容进行合并，合并后的提交以当前分支的提交作为第一个父提交，以&lt; commit&gt;为第二个父提交。合并操作还支持将多个&lt; commit &gt;代表的分支和当前分支进行合并，过程类似。<br>一般情况下git会比较智能的把两个分支合并，但合并操作并非总会成功，因为合并的不同提交可能同时修改了同一文件相同区域的内容，导致冲突。冲突会造成合并操作的中断，冲突的文件被标识，用户可以对标识为冲突的文件进行冲突解决操作，然后更新暂存区，再提交，最终完成合并操作。如遇到比较复杂的情形，请参考<a href="http://www.worldhello.net/gotgit/03-git-harmony/020-conflict.html" target="_blank" rel="noopener">冲突解决</a></p>
<p>在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。要用它得遵守一条准则：</p>
<blockquote>
<p>不要对在你的仓库外有副本的分支执行变基。</p>
</blockquote>
<p>还有就是分支的管理策略，如何在项目实践中创建像开发分支、特性分支、修改特定bug的分支等，这篇文章给了个比较好的例子供参考<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a><br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-model.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-model.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<p>关于git工作流还有个参考资料是<a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="noopener">git 工作流指南</a></p>
<h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>以上都是我们在本地操作，Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。我们可以搭建团队的git服务器，也可以使用别人提供的。像有名的<a href="https://github.com/" target="_blank" rel="noopener">github</a>，<a href="http://git.oschina.net/" target="_blank" rel="noopener">开源中国的git服务</a>等。github免费的只提供公有仓库，开源中国提供免费创建私有仓库。只要申请个账号登录就可以享受这一切了。由于你的本地Git仓库和GitHub仓库之间是通过<a href="https://zh.wikipedia.org/zh-cn/Secure_Shell" target="_blank" rel="noopener">SSH</a>加密传输的，在使用之前需要设置一下SSH key。</p>
<p>这之前要了解公钥和私钥的概念，见<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">公开密钥加密</a>。使用SSH公钥/私钥时,公钥放在github上，私钥在自己电脑上，更安全，不用每次输入密码。查看电脑中存在的SSH keys： ls -al ~/.ssh   类似rsa rsa.pub是一对SSH key *.pub是公钥。我们可以生成新的密钥对，使用下面命令生成SSH key；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  ssh-keygen -t rsa -b 4096 -C &quot;your_enmail@e.com&quot;</span><br></pre></td></tr></table></figure>
<p>-t指加密类型：rsa、DSA、ECDSA等，-b指大小bits，-C Comment标签。<br>然后会提示你保存的路径文件名 和 是否加密码（访问key时使用的密码）。生成密钥对后，需要把公钥部署到github：在设置中，SSH key管理中把公钥内容添加。*.pub使用编辑器打开复制粘贴进去。然后在本地测试连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>可以参考<a href="https://help.github.com/categories/ssh/" target="_blank" rel="noopener">github帮助</a>。下面是远程仓库有关的命令及功能：</p>
<ul>
<li><p>查看远程仓库：git romote  -v</p>
</li>
<li><p>查看某个远程仓库详细信息：git remote show [remote-name]</p>
</li>
<li><p>添加远程仓库：git remote add [shortname] [url]</p>
</li>
<li><p>从远程仓库抓取数据到本地：git fetch [remote-name] [branch-name]<br>  如果设置了某个分支用于跟踪某个远端仓库的分支,git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支<br>  = git fetch+git merge</p>
<p>  git pull &lt; 远程主机名 &gt; &lt; 远程分支名 &gt;:&lt; 本地分支名 &gt;</p>
</li>
<li><p>推送数据到远程仓库：</p>
<p> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>
<p> 在跟踪分支里输入git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据</p>
</li>
<li><p>远程仓库删除和重命名： git remote rm   和   git remote rename</p>
</li>
<li><p>跟踪远程分支：git checkout -b [分支名] [远程名]/[分支名]<br>从远程分支 checkout 出来的本地分支，称为_跟踪   分支(tracking branch)<br>git clone 会自动创建一个名为 master 的分支来跟踪 origin/master<br>若果让本地已经存在的分支和远程分支关联，使用<code>git branch --set-upstream-to [远程名]/[分支名]</code></p>
</li>
<li><p>删除远程分支：git push [远程名] :[分支名]</p>
</li>
</ul>
<h4 id="git-常用命令图"><a href="#git-常用命令图" class="headerlink" title="git 常用命令图"></a>git 常用命令图</h4><p>以上常用命令，可以如下图所示：<br>&lt;img src=”<a href="http://wonesky.qiniudn.com/git-basic.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;" target="_blank" rel="noopener">http://wonesky.qiniudn.com/git-basic.png-myimg&quot;style=&quot;display:block;margin:auto&quot;/&gt;</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></li>
<li><a href="http://www.worldhello.net/gotgit/index.html" target="_blank" rel="noopener">Git权威指南</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git简明指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰-常用Git命令清单</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a></li>
<li><a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="noopener">git 工作流指南</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>那些爬过的梯子</title>
    <url>/2015/06/14/%E9%82%A3%E4%BA%9B%E7%88%AC%E8%BF%87%E7%9A%84%E6%A2%AF%E5%AD%90/</url>
    <content><![CDATA[<p>5月19日在G_F_W的黑名单上又多了一个重量级网站，中文维基百科被关键字屏蔽和DNS污染而无法访问。英文版却并没有受影响，这是要提高国民英语水平的节奏。对于那些经常使用谷歌服务，或者发现经常有想去的网站打不开，再或者想听到不同的人的不同声音来开阔一下视野，或者你想看些国内找不到的历史资料，在此向你介绍几种不同的梯子。梯子的作用就是连接上一台国外的服务器，然后通过那台服务器访问你想要的内容，服务器再把内容返回给你。关于梯子的获取类似蛋和鸡的关系，一般情况下梯子都在挡在墙的外面，当你获得一个后翻过去后就会发现更多的工具。</p>
<a id="more"></a>

<p>关于GFW对网站的屏蔽的一些简单方法有对域名的屏蔽，对IP的封锁，还有对DNS劫持和污染，让你访问的域名无法解析的真正的IP地址。复杂点的就是对关键字的屏蔽和对流量分析进行屏蔽。对于某些大型的网站服务，比如google，你可以通过搜寻可用的IP，修改本地hosts文件来访问。毕竟这种方法只能绕过少许特定网站，局限性很大，常见梯子的种类一般有以下三种：</p>
<ul>
<li>http/https proxy</li>
<li>socks proxy</li>
<li>vpn</li>
</ul>
<p>一般情况下，这些稳定的服务都是要收费的，网上也能搜到一些免费的账号和工具软件，但都有些限制，比如账户密码不定时改变，就像某种网站的网址一样，还有的有流量限制等，毕竟天下没有免费的午餐。</p>
<h2 id="http-https-proxy"><a href="#http-https-proxy" class="headerlink" title="http/https proxy"></a>http/https proxy</h2><p>对于第一种，基于http/https的代理，简单易用但只有对使用http协议才起作用，一般用于网页浏览。一个比较有名的工具<a href="https://github.com/goagent/goagent" target="_blank" rel="noopener">GoAgent</a>就是利用google提供的Google App Engine服务实现http proxy。下面是GoAgent的工作原理：<br><img src="http://wonesky.qiniudn.com/goagent.jpg-mypic" style="display:block;margin:auto"/><br>你可以利用GAE和GoAgent创建你的http代理服务器。详细教程见<a href="https://github.com/goagent/goagent/blob/wiki/InstallGuide.md" target="_blank" rel="noopener">GoAgentInstallGuide</a>。由于google的IP经常被封，你可能需要<a href="https://github.com/yinqiwen/gscan/" target="_blank" rel="noopener">gscan</a>或者<a href="https://github.com/azzvx/gogotester" target="_blank" rel="noopener">gogotester</a>等工具来扫描测试可用的google IP。由于http是明文传输，安全性比较差,一般使用的不多。主要介绍下第二种和第三种。</p>
<h2 id="socks-proxy"><a href="#socks-proxy" class="headerlink" title="socks proxy"></a>socks proxy</h2><p>SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。具体详见<a href="http://baike.baidu.com/view/262359.htm" target="_blank" rel="noopener">百度百科</a>或者<a href="https://zh.wikipedia.org/wiki/SOCKS" target="_blank" rel="noopener">维基百科</a>介绍。</p>
<p>socks4已经过时了，现在是用socks5代理。我们需要的是一台能没有GFW阻碍的socks5代理服务器，把我们的访问请求转交给它，它把请求传送到目的地，并把请求的结果返还给你。</p>
<h3 id="SSH-socks-proxy"><a href="#SSH-socks-proxy" class="headerlink" title="SSH socks proxy"></a>SSH socks proxy</h3><p>由于socks代理自身并没有什么加密机制，为了安全考虑，可以使用<a href="http://baike.baidu.com/subview/16184/5909252.htm" target="_blank" rel="noopener">SSH</a>（安全外壳协议），来加密连接远程服务器。下图是通过SSH socks proxy访问网站的原理图：<br><img src="http://wonesky.qiniudn.com/whats-ssh.png-mypic" style="display:block;margin:auto"/><br>现在需要一款SSH Client工具和一个SSH账号就可以连通通往自由的大门了。常用的SSH客户端软件有<a href="http://www.bitvise.com/ssh-client-download" target="_blank" rel="noopener">Bitvise SSH Client</a> 和MyEnTunnel，在网上找个免费的或者购买个SSh账号（需要主机名或IP、远程端口号、用户名和密码）就可以连接远程主机了，再通过配置本地代理，使浏览器或某些软件通过梯子联网了。Bitvise SSH Client设置连接远程socks代理服务器见下图，包括远程主机IP或域名地址，远程端口，用户名和密码：<br><img src="http://wonesky.qiniudn.com/ssh%E8%AE%BE%E7%BD%AE.png-mypic" alt="BVssh设置"></p>
<p>然后设置本地代理供浏览器和其它软件使用，Listing Interface设为本地IP：127.0.0.1，Listen Port可以设置为1025~65535中的一个未被占用的端口号，这个设置会为你电脑上的软件服务，在后面的浏览器设置中会用到，下图是我的设置：<br><img src="http://wonesky.qiniudn.com/ssh%E8%AE%BE%E7%BD%AE2.png-mypic" alt="BVssh设置"></p>
<p>在浏览器端firefox或chrome浏览器通过扩展可方便的管理网络的代理 ，使只有特定的网站使用代理，其他的使用本地网络。Chrome使用<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchyOmega</a>，firefox使用<a href="https://addons.mozilla.org/zh-CN/firefox/addon/autoproxy/" target="_blank" rel="noopener">autoproxy</a>，扩展设置时，协议选择SOCKS5，代理服务器填127.0.0.1，端口填写你使用的本地代理端口号，即上步设置的那个Listen Port。SwitchyOmega设置官方详细教程在<a href="https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList" target="_blank" rel="noopener">这儿</a>。设置好后就可以畅游网络了。</p>
<p>福利：两个提供免费ssh账号的网站 <del><a href="http://boafanx.tabboa.com/free/" target="_blank" rel="noopener">http://boafanx.tabboa.com/free/</a></del> 和<a href="http://blog.onlybird.com/getfreessh" target="_blank" rel="noopener">http://blog.onlybird.com/getfreessh</a></p>
<h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><p>Shadowsocks（中文名称：影梭）是一个安全的socks5代理，用于保护网络流量，是一个开源项目，官网shadowsocks.org已被屏蔽，<a href="https://github.com/shadowsocks" target="_blank" rel="noopener">github地址</a>。其原理如下图所示：<br><img src="http://wonesky.qiniudn.com/whats-shadowsocks.png-mypic" alt="shadowsocks原理"></p>
<p>shadowsocks和SSH socks代理使用差不多，需要一个shadowsocks客户端，一个shadowsocks服务端账号，连接后在设置下本地代理。shadowsocks是一个跨平台的，根据你的系统去搜客户端，很容易就找到，实在找不到联系我。使用设置步骤和SSH非常相似，这儿就不多说了。</p>
<p>另外放点福利，一个免费提供shadowsocks账号的网站<a href="http://www.ishadowsocks.net/" target="_blank" rel="noopener">ishadowsocks.net</a>,这个账号每隔6小时密码变更一次。<br>另一个是<a href="http://www.shadowsocks.asia" target="_blank" rel="noopener">shadowsocks中文社区</a>和<a href="http://i.freevpnss.com/" target="_blank" rel="noopener">FreeVPNSS</a>。<br><del>另一个是<a href="http://ssnode.co/" target="_blank" rel="noopener">ssnode.co</a> 的邀请码,这个网站提供每月5G的流量的shadowsocks免费账号。<br>邀请码1：ODY3NWE3NGUwMWM4YTIwZThh<br>邀请码2：zFhYjY1MGIyNWI0MTE0ZTkzY</del></p>
<h2 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h2><p>VPN是虚拟专用网络的缩写，是通过建立虚拟网络连接远程VPN服务器。百度百科上对<a href="http://baike.baidu.com/view/891121.htm" target="_blank" rel="noopener">VPN代理</a>的解释。使用VPN是全部连接都使用代理，只要你连着VPN，所有的联网软件都使用代理连网。</p>
<p>推荐一款我用过的免费VPN——VPNgate，由日本国立筑波大学研究生院为学术研究目的运营，目前已经开源，由志愿者提供主机。但他的主页已被墙，这就造成了梯子在墙的那边的尴尬境地，有了一个就能容易的找到另一个，万事开头难。github上一个提供VPNgate网址镜像和下载的<a href="https://github.com/waylau/vpngate-mirrors" target="_blank" rel="noopener">网址</a></p>
<p>还有一款<a href="https://www.psiphon3.net/zh/index.html" target="_blank" rel="noopener">赛风</a>，它提供了集SSH和VPN于一体的代理软件，服务器账号是自动搜寻的。很方便使用，也比较容易被封，道高一尺魔高一丈，双方都在不断的升级。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如果你对安全要求比较严格，要对免费的提高警惕，就需要搭建自己的代理服务器。并不要只使用上面介绍的单一的代理，你需要去了解下<a href="http://www.theonionrouter.com/" target="_blank" rel="noopener">TOR</a>或者<a href="https://geti2p.net/zh/" target="_blank" rel="noopener">i2p</a>进行多重代理，或者更甚再加上使用虚拟机，隔离代理和上网环境。另外可以看下<a href="https://prism-break.org/zh-CN/all/" target="_blank" rel="noopener">粉碎棱镜</a>项目上提供的安全的软件。</p>
<p>前一段github上<a href="https://github.com/greatfire/wiki" target="_blank" rel="noopener">greatfire</a>遭受来自GFW的DDOS攻击，因为其提供了一些免爬墙就可访问的网站镜像。</p>
<h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>在此只说安卓系统，上面介绍的像赛风，shadowsocks（影梭）在手机都有客户端，另外还有fqroutuer。只有影梭需要你有Shadowsocks账号，而账号上面已有免费的提供了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>俗话说身怀利器，杀心自起，不要以为你有了工具就可以随意干些坏事了，你太低估他们的能力了，只是你还没有那个价值值得去找你。这些只是你减少被束缚的工具，在互联网时代，信息并不是那么容易被垄断的。</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>免费搭建独立博客</title>
    <url>/2015/06/05/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>6月@four日，在这个”你懂得“的日子，小道消息的微信公众号挂掉了。在这个有一条看不见的红线随时都会出现，每个词语都可能成为敏_感词的时代，若想写点东西，还是有必要搭建一个属于自己的博客。</p>
<a id="more"></a>

<p>一个不错的选择是购买空间和域名，用WordPress搭建自己的独立博客。还有一种更酷的选择是在github或gitcafe上利用他们提供的pages服务，创建一个轻量级的博客站点。这样就不需要自己搭建服务器，况且还支持绑定自己的域名。如果你需要申请自己的域名，每年还是需要几十元的域名费的，当然也有提供免费域名的，像<a href="http://www.dot.tk" target="_blank" rel="noopener">tk免费域名</a>。这就是免费或小费用搭建独立博客，今天就介绍下我的博客搭建的过程，主要以github为主，gitcafe和这类似。</p>
<h2 id="github-gitcafe的pages服务"><a href="#github-gitcafe的pages服务" class="headerlink" title="github/gitcafe的pages服务"></a>github/gitcafe的pages服务</h2><p>和代码打交道的应该都知道<a href="https://github.com" target="_blank" rel="noopener">github</a>,它是一个全球知名的代码托管的平台。<a href="https://gitcafe.com" target="_blank" rel="noopener">gitcafe</a>是一个国内提供相同服务的网站。他们提供的pages服务是为了<a href="https://pages.github.com" target="_blank" rel="noopener">Websites for you and your projects</a>,这是github pages的<a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">帮助页</a>,这是gitcafe的<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">帮助页</a>.在帮助页里有详细的关于pages及如何创建使用的介绍。这里注意下github提供两种pages，一种是项目的pages即Project Pages，另一种是用户pages，即User&amp;Organization Pages。我们一般使用第二种，即你建一个username.github.io的代码仓库，等建好后访问username.github.io网址就会转到你的博客，每个用户只能创建一个这种站点。</p>
<h2 id="静态网站生成程序"><a href="#静态网站生成程序" class="headerlink" title="静态网站生成程序"></a>静态网站生成程序</h2><p>静态网站是一种简单的网页，不需要后台数据库支持。静态网站生成器程序帮你做了大部分工作，你只需几个简单的命令就可以很容易的生成页面，修改，发布网页。github上有份静态站点生成器的<a href="https://staticsitegenerators.net" target="_blank" rel="noopener">列表</a>.几个常用的有Jekyll(github pages官网就提供Blogging with Jekyll的说明)<a href="http://jekyllrb.com/" target="_blank" rel="noopener">官网</a>、<a href="http://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>、<a href="http://octopress.org" target="_blank" rel="noopener">Octopress</a>等。我的这个网站是使用Hexo生成的。</p>
<h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>hexo出自台湾大学生<a href="https://twitter.com/tommy351" target="_blank" rel="noopener">tommy351</a>之手，是一个基于Node.js的快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><p>Hexo官网有安装的<a href="http://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">详细说明</a>,安装前提是先安装<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Git是一款免费、开源的分布式版本控制系统。</p>
<p>分别去官网上下载适合你操作系统的安装文件，安装后进行相关配置。安装完git和Node.js后，把node.js安装目录添加Path环境变量，或者在命令行窗口下进入安装目录再执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>如果你的版本没安装EJS, Stylus, Marked not built-in anymore ,请手动安装以下插件，若想安装其它插件，命令类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save </span><br><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<h3 id="Hexo配置使用"><a href="#Hexo配置使用" class="headerlink" title="Hexo配置使用"></a>Hexo配置使用</h3><p>安装完成后，根据自己喜好建立好目录文件夹，在git shell下进入此文件下，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>新建完成后，会出现一些目录，具体情况见<a href="http://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">帮助</a>.然后执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>可以在官网查看<a href="http://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo 常见命令</a><br>在浏览器出输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>,如果出现网页则证明安装成功。还有个页面打不开的可能性是由于google被屏蔽，个别主题页面中默认使用了ajax.google.com 下的js包。在目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes/themename/layout/_partial</span><br></pre></td></tr></table></figure>
<p>在after_footer.ejs和header.ejs中看能否查到带ajax.googleapis.com或fonts.googleapis.com,想办法替换。</p>
<h3 id="主题选择配置"><a href="#主题选择配置" class="headerlink" title="主题选择配置"></a>主题选择配置</h3><p>Hexo提供了多种主题供选择，详情见<a href="http://hexo.io/themes/" target="_blank" rel="noopener">官网主题</a>,我的博客选用的是Jacman。各主题配置见主题的网址。</p>
<p>Jacman 是为 Hexo 设计的一款清新且具有响应式的主题，拥有更丰富的特性并支持了很多的国内服务。Jacman 始于 Pacman 修改而来。详情见github上<a href="https://github.com/wuchong/jacman/blob/master/README_zh.md" target="_blank" rel="noopener">Jacman</a>，<a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/" target="_blank" rel="noopener">如何使用Jacman主题</a>。</p>
<p>我一开始选择的是Pacman，主题已经不更新了，使用的话要自己修改添加需要的东西，后来发现Jacman已经把想要的功能都添加了，就直接改用Jacman了。</p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>使用以下命令，会在目录source/_posts/下产生一个“文章名.md”文件，我们就可以使用Markdown语法来写文章了。关于Markdown语法参见<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown语法说明</a>。使用Markdown可以很方便的直接写出你想要的网页版格式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 文章名</span><br></pre></td></tr></table></figure>

<h2 id="配置github并部署博客"><a href="#配置github并部署博客" class="headerlink" title="配置github并部署博客"></a>配置github并部署博客</h2><p>在这大家需要点git代码版本控制的知识，了解git分布式版本控制工具的使用，会简单操作。git相关教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰git教程</a>、<a href="http://www.git-scm.com/book/zh/v1" target="_blank" rel="noopener">Pro git</a> </p>
<p>在github上注册账号，创建username.github.io仓库，然后在本地配置git的用户名和邮箱地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;YOUR NAME&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure>
<p>生成SSh key,输入以下命令然后一路回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>在github网站设置中ssh key 项，把生成的key复制添加到github账户上。<br>测试是否连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="noopener">详情见官网</a>或者参考<a href="http://beiyuu.com/github-pages/" target="_blank" rel="noopener">使用Github Pages建独立博客</a></p>
<p>部署博客，参见<a href="http://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">hexo官网</a><br>在_config.yml 中修改参数，增加类似如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:username/username.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -d</span><br></pre></td></tr></table></figure>
<p>部署到你的github上。</p>
<p>关于404页面，可以在主目录下新建404.html文件。404页面还可以做些有意义的事，可以连接404公益项目，以下是几个404公益项目：</p>
<ul>
<li><a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯公益404</a> </li>
<li><a href="http://yibo.iyiyun.com/Index/web404" target="_blank" rel="noopener">404公益_益云(公益互联网)社会创新中心</a></li>
<li><a href="http://404page.missingkids.org.tw/" target="_blank" rel="noopener">失蹤兒童少年資料管理中心404</a></li>
</ul>
<p>404.html页面代码如下，采用的是腾讯404公益</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="域名绑定与DNS设置"><a href="#域名绑定与DNS设置" class="headerlink" title="域名绑定与DNS设置"></a>域名绑定与DNS设置</h2><p>github或gitcafe会给你分配有个二级域名username.github.io，你也可以绑定到你自己的域名。如果没域名，可以申请个<a href="http://www.dot.tk" target="_blank" rel="noopener">免费tk域名</a>，或者在<a href="https://www.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>上申请个，很好的一点是支持支付宝，像<a href="https://www.name.com/" target="_blank" rel="noopener">name</a>和<a href="https://www.namecheap.com/" target="_blank" rel="noopener">namecheap</a>只支持paypal和比特币。网上有很多优惠码，一般第一年都很便宜，到期后如果续费价格会高些，但可以转到其它域名服务商那里，又成为第一年了。不推荐国内的域名服务商，好像有很多在域名转出或其它情况会有很多手续。另注册cn域名都是要备案的，一般注册国际域名，像.com、.net、.org等，像.me、.us、 .cn这是某个国家的域名后缀。</p>
<p>域名解析即DNS，可以使用国内的<a href="http://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a>，在域名服务商那里把DNS服务器地址设为DNSPod的服务地址，你就可以在DNSPod里设置你域名的各种记录了。</p>
<p><a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/" target="_blank" rel="noopener">github帮助</a>里有具体设置的详细信息。首先在你github里添加名为CNAME的无后缀文件，文件内容为你的域名地址，可以是顶级域名，也可以是二级域名。顶级域名如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wonesky.com</span><br></pre></td></tr></table></figure>
<p>你就要在DNSPod上设置A记录使其指向192.30.252.153 （可能会变动参见<a href="https://help.github.com/articles/my-custom-domain-isn-t-working/" target="_blank" rel="noopener">github</a>）<br>如果使用二级域名像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.wonesky.com</span><br><span class="line">blog.wonesky.com</span><br></pre></td></tr></table></figure>
<p>DNSPod可以设置CNAME记录，指向username.github.io，这样可以避免DNS的IP变化后重新修改。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><a href="http://beiyuu.com/github-pages/" target="_blank" rel="noopener">使用Github Pages建独立博客</a></li>
<li><a href="http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/" target="_blank" rel="noopener">hexo + github + 多说 来搭建免费博客</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo 你的博客</a></li>
<li><a href="http://jianshu.io/p/5e2bc4e88f32" target="_blank" rel="noopener">Github+Hexo搭建静态Blog小结</a></li>
<li><a href="http://www.zhihu.com/question/20962496" target="_blank" rel="noopener">如何在 GitHub 上写博客？–知乎</a></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>再次启程</title>
    <url>/2015/05/21/%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/</url>
    <content><![CDATA[<p>有人说喜欢写博客的人会经历三个阶段：第一阶段是刚接触博客感觉很新鲜，就在免费空间来写，比如新浪网易搜狐博客等。第二个阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。第三个阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。可笑的是，我虽没写过几篇博客，却也经历了这三个阶段。</p>
<a id="more"></a>
<h2 id="折腾历程"><a href="#折腾历程" class="headerlink" title="折腾历程"></a>折腾历程</h2><p>2011年微博已经开始流行，那时有开个博客的想法，正好和微博关联。就在新浪博客写了几篇日常感想。后来一篇不知碰到了哪个敏感词的红线，博客竟然挂掉了。那次很让我很纳闷，也让我开始关注我国的审查机制和那堵高高的防火长城。现在看到微博上的敏感词，被删帖封号等等，那时还是太年轻了。</p>
<p>记得是去年的4月份，注册了 <a href="http://www.wonesky.com" target="_blank" rel="noopener">wonesky.com</a> 这个域名，还花了一百五十大洋买了一年的空间，用WordPress搭建起自己的博客。折腾了不少时候，想着花了钱的总该会珍惜，可是还是没写几篇就放那了。</p>
<p>前段时间想学学版本控制管理工具git，就多关注了些github。发现它还提供一项很好的pages服务，可以在上面搭建简单的静态网站。对于只写几篇博客的已经足够了,就在域名到期前又续费了一年,于是就折腾开了静态网站生成器，网上有个github上静态网站生成器程序的 <a href="http://staticsitegenerators.net" target="_blank" rel="noopener">列表</a> 。我选择了基于node.js的hexo。不懂没关系，对着说明做就是了。选择了基于pacman修改的jacman主题。这个站点就这样建起来了。</p>
<h2 id="为什么回来"><a href="#为什么回来" class="headerlink" title="为什么回来"></a>为什么回来</h2><p>看过刘未鹏一篇博客<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">“为什么你从现在开始就应该写博客”</a>，文章已经给出足够的理由去让你心动想去做这件事。想做不代表可以做下来，如何付诸行动，并坚持下来才是关键。我尝试过，只写了几篇就搁浅了。随着时间推移，这事偶尔还会浮现，还是有点不甘心。还是有必要去记录所看的书，学到的技能，对生活的一点思考。</p>
<p>互联网的发展，使信息获取变的很容易。我们被各种信息包围着，有用的没用的一股脑的流过，留不下多少痕迹。信息不是知识，没经过转化，就没有什么价值。书写是为了更好的思考。有时候感觉自己看书明白了些道理，可是要和别人讲的时候又说不太清楚，看到的那些自己其实并没有真正的理解，写出来会让你重新去审视那些问题。</p>
<p>写程序是先让它运行起来，发现问题快速迭代来改进。书写也应该是这样，先写起来，再来改进。别顾忌其它，先运行起来。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
